from math import sqrt, pow, pi, tan

# Евклидово расстояние
# На плоскости евклидово расстояние между двумя точками (x1;y1) и (x2;y2) определяется так
# ρ = sqrt(x1-x2)^2 + (y1-y2)^2
# Напишите программу определяющую евклидово расстояние между двумя точками, координаты которых заданы.
# x1, y1, x2, y2 = float(input()), float(input()), float(input()), float(input())
# a = x1 - x2
# b = y1 - y2
# c = pow(a, 2)
# d = pow(b, 2)
# print(sqrt(c + d))

# Площадь и длина
# Напишите программу определяющую площадь круга и длину окружности по заданному радиусу R.
# На вход программе подается одно вещественное число R.
# Программа должна вывести два числа – площадь круга и длину окружности радиуса R.
# Примечание. Используйте константу math.pi Formula: S = pi * R^2 ; C = 2 * pi * R^2
# R = float(input())
# S = pi * pow(R, 2)
# C = 2 * pi * R
# print(S, C, sep="\n")

# Квадратное уравнение
# Даны три вещественных числа a, b, c. Напишите программу, кот. находит вещественные корни квадратного уравнения
# ax^2 + bx + c = 0.
# Формат входных данных
# На вход программе подается три вещественных числа a,b,c, каждое на отдельной строке. a != 0
# Формат выходных данных
# Программа должна вывести вещественные корни уравнения если они существуют или текст «Нет корней» в противном случае.
# Примечание. Если уравнение имеет два корня, то следует вывести их в порядке возрастания.
# https://www.berdov.com/docs/equation/quadratic_equations/
# a, b, c = float(input()), float(input()), float(input())
# D = pow(b, 2) - 4 * a * c

# if D > 0:
#     x1 = (-b + sqrt(D)) / (2 * a)
#     x2 = (-b - sqrt(D)) / (2 * a)
#     if x1 < x2:
#         print(x1, x2, sep="\n")
#     else:
#         print(x2, x1, sep="\n")
# elif D == 0:
#     x1 = (-b + sqrt(D)) / (2 * a)
#     print(x1)
# else:
#     print("Нет корней")

# better solution
# if D > 0:
#     x1 = (-b + sqrt(D)) / (2 * a)
#     x2 = (-b - sqrt(D)) / (2 * a)
#     print(min(x1, x2), max(x1, x2))
# elif D == 0:         # if D == 0, it can be ommited in formula
#     x1 = -b / (2 * a)
#     print(x1)
# else:
#     print("Нет корней")

# Правильный многоугольник
# Правильный многоугольник — выпуклый многоугольник, у которого равны все стороны и все углы между смежными сторонами.
# Площадь правильного многоугольника с длиной стороны a и количеством сторон n вычисляется по формуле:
# S = (n * pow(a, 2)) / (4 * tg * (pi / n))
# Даны два числа: натуральное число n и вещественное число a. Напишите программу, кот. находит площадь указанного
# правильного многоугольника
# На вход программе подается два числа n и a, каждое на отдельной строке.
n, a = int(input()), float(input())
S = (n * pow(a, 2)) / (4 * tan(pi / n))
print(S)
