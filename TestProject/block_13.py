# def print_message():
#     print('–Ø - –ê—Ä—Ç—É—Ä,')
#     print('–∫–æ—Ä–æ–ª—å –±—Ä–∏—Ç–∞–Ω—Ü–µ–≤. ')
#
#
# print_message()

'''
–ó–≤–µ–∑–¥–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ 1
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é draw_box(), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∑–≤–µ–∑–¥–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ 14√ó10 –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º:

**********
*        *
*        *
*        *
*        *
*        *
*        *
*        *
*        *
*        *
*        *
*        *
*        *
**********
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –î–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª for.
'''


# def draw_box():
#     print("*" * 10)
#     for _ in range(12):
#         print("*" + " " * 8 + "*")
#     print("*" * 10)
#
#
# draw_box()
from operator import and_

'''
–ó–≤–µ–∑–¥–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ 1
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é draw_triangle(), –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∑–≤–µ–∑–¥–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å –∫–∞—Ç–µ—Ç–∞–º–∏, —Ä–∞–≤–Ω—ã–º–∏ 10 –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º:
*
**
***
****
*****
******
*******
********
*********
**********
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –î–ª—è –≤—ã–≤–æ–¥–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª for. 
'''
# def draw_triangle():
    # for i in range(1, 11):
    #     print("*" * i)
    # or
    # print(*("*" * i for i in range(1, 11)), sep='\n')


# draw_triangle()

'''Factorial and recursion
–§—É–Ω–∫—Ü–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –Ω–∞–≥–ª—è–¥–Ω–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø —Ä–µ–∫—É—Ä—Å–∏–∏, –∫–æ–≥–¥–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–∂–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.
'''
# def factorial(n):
#     if n == 0:
#         return 1
#     else:
#         return n * factorial(n - 1)
#
#
# print(factorial(7))

# n = 5
# print(id(n))  # shows id (address) in memory
# n += 4
# print(id(n))
#
# lst = [1,2,3]
# print(id(lst))
# lst.append(44)
# print(id(lst))

'''
Difference in links to memory!!!
https://stackoverflow.com/questions/2347265/why-does-behave-unexpectedly-on-lists
https://habr.com/ru/company/mailru/blog/454324/
'''
# lst = [1, 2, 3]
# lst_copy = lst
#
# print('–ê–¥—Ä–µ—Å –≤ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–∏–º–µ–Ω–∏) lst:', id(lst))
# print('–ê–¥—Ä–µ—Å –≤ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–∏–º–µ–Ω–∏) lst_copy:', id(lst_copy))
# if lst is lst_copy:
#     print('–ê–¥—Ä–µ—Å–∞ –ø–∞–º—è—Ç–∏ lst –∏ lst_copy —Å–æ–≤–ø–∞–¥–∞—é—Ç')
# else:
#     print('–ê–¥—Ä–µ—Å–∞ –ø–∞–º—è—Ç–∏ lst –∏ lst_copy –ù–ï —Å–æ–≤–ø–∞–¥–∞—é—Ç')
#
# '''
# –ê –≤—Å–µ –ø–æ—Ç–æ–º—É, —á—Ç–æ –∑–¥–µ—Å—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–∏–º—è) –∏
# –¥–ª—è –Ω–µ–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏
# '''
# lst = lst + [8, 9]   # –ó–¥–µ—Å—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ !!!
#
# print('–ê–¥—Ä–µ—Å –≤ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–∏–º–µ–Ω–∏) lst:', id(lst))
# print('–ê–¥—Ä–µ—Å –≤ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–∏–º–µ–Ω–∏) lst_copy:', id(lst_copy))
# if lst is lst_copy:
#     print('–ê–¥—Ä–µ—Å–∞ –ø–∞–º—è—Ç–∏ lst –∏ lst_copy —Å–æ–≤–ø–∞–¥–∞—é—Ç')
# else:
#     print('–ê–¥—Ä–µ—Å–∞ –ø–∞–º—è—Ç–∏ lst –∏ lst_copy –ù–ï —Å–æ–≤–ø–∞–¥–∞—é—Ç')
#
# print(lst)  # [1, 2, 3, 8, 9]
# print(lst_copy)  # [1, 2, 3]
#
#
# lst = [1, 2, 3]
# lst_copy = lst
#
# print('–ê–¥—Ä–µ—Å –≤ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–∏–º–µ–Ω–∏) lst:', id(lst))
# print('–ê–¥—Ä–µ—Å –≤ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–∏–º–µ–Ω–∏) lst_copy:', id(lst_copy))
# if lst is lst_copy:
#     print('–ê–¥—Ä–µ—Å–∞ –ø–∞–º—è—Ç–∏ lst –∏ lst_copy —Å–æ–≤–ø–∞–¥–∞—é—Ç')
# else:
#     print('–ê–¥—Ä–µ—Å–∞ –ø–∞–º—è—Ç–∏ lst –∏ lst_copy –ù–ï —Å–æ–≤–ø–∞–¥–∞—é—Ç')
#
# '''
# –ê –∑–¥–µ—Å—å –ù–ï —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–∏–º—è), –ø–æ—Ç–æ–º—É –∏ lst, –∏ lst_copy
# –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏
# '''
# lst += [8, 9]  # –ó–¥–µ—Å—å (–æ–ø–µ—Ä–∞—Ü–∏–µ–π +=) –∏–∑–º–µ–Ω—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ !!!
#
# print('–ê–¥—Ä–µ—Å –≤ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–∏–º–µ–Ω–∏) lst:', id(lst))
# print('–ê–¥—Ä–µ—Å –≤ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–∏–º–µ–Ω–∏) lst_copy:', id(lst_copy))
# if lst is lst_copy:
#     print('–ê–¥—Ä–µ—Å–∞ –ø–∞–º—è—Ç–∏ lst –∏ lst_copy —Å–æ–≤–ø–∞–¥–∞—é—Ç')
# else:
#     print('–ê–¥—Ä–µ—Å–∞ –ø–∞–º—è—Ç–∏ lst –∏ lst_copy –ù–ï —Å–æ–≤–ø–∞–¥–∞—é—Ç')
#
# print(lst)  # [1, 2, 3, 8, 9]
# print(lst_copy)  # [1, 2, 3, 8, 9]

'''
–ó–≤–µ–∑–¥–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é draw_triangle(fill, base), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:
fill ‚Äì —Å–∏–º–≤–æ–ª –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å;
base ‚Äì –≤–µ–ª–∏—á–∏–Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è —Ä–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞;
–∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ ‚Äì –Ω–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ.
'''
# def draw_triangle(fill, base):
    # for i in range(1, (base // 2 + 1) + 1):
    #     print(fill * i)
    # for j in range(base // 2 + 1, base + 1):
    #     print(fill * (base - j))

    # Other solution
    # for i in range(1, base + 1):
    #     print(fill * min(i, base - i + 1))


# fill, base = input(), int(input())
#
# draw_triangle(fill, base)

'''
–ó–≤–æ–Ω–æ–∫ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω—É üòç
(10 –±–∞–ª–ª–æ–≤) from here https://stepik.org/lesson/494508/step/3?unit=485909
–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞ –≤ –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–µ BEEGEEK 45 –º–∏–Ω—É—Ç, –∞ –ø–µ—Ä–µ–º–µ–Ω—ã –º–µ–∂–¥—É —É—Ä–æ–∫–∞–º–∏ ‚Äì 5 –º–∏–Ω—É—Ç.
–ü–µ—Ä–≤—ã–π —É—Ä–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ä–æ–≤–Ω–æ –≤ 88 —á–∞—Å–æ–≤ —É—Ç—Ä–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é –≤–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è n-—ã–π —É—Ä–æ–∫?
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n(n‚â§15) ‚Äì –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –¥–≤–∞ —á–∏—Å–ª–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª–æ–º ‚Äì –≤—Ä–µ–º—è –≤ –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è n-—ã–π —É—Ä–æ–∫.
'''
# n = int(input())
# lesson, break_time = 45, 5
# total_time = lesson * n + break_time * (n - 1)
# lesson_time = total_time // 60 + 8
# break_time = total_time % 60
#
# print(lesson_time, break_time)


'''
–§–ò–û
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é print_fio(name, surname, patronymic), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:
name ‚Äì –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞;
surname ‚Äì —Ñ–∞–º–∏–ª–∏—è —á–µ–ª–æ–≤–µ–∫–∞;
patronymic ‚Äì –æ—Ç—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫–∞;
–∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –ø–µ—á–∞—Ç—å –§–ò–û —á–µ–ª–æ–≤–µ–∫–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü—Ä–µ–¥—É—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ—Ç —Ñ–∞–∫—Ç, —á—Ç–æ –≤—Å–µ —Ç—Ä–∏ –±—É–∫–≤—ã –≤ –§–ò–û –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä.
'''
# def print_fio(name, surname, patronymic):
    # fio = list()
    # fio.append(surname[0].upper())
    # fio.append(name[0].upper())
    # fio.append(patronymic[0].upper())
    # print(*fio, sep="")

    # or just like this:
    # print(surname[0].upper(), name[0].upper(), patronymic[0].upper(), sep="")

    # Other solution
    # [print(m[0].upper(),end='') for m in [surname,name,patronymic]]
    # Other solution
    # print((surname[0]+name[0]+patronymic[0]).upper())
    # Other solution
    # print(*[i[0].upper() for i in [surname, name, patronymic]], sep='')
    # Other solution
    # print(f"{surname[0]}{name[0]}{patronymic[0]}".upper())


# name, surname, patronymic = input(), input(), input()
#
# print_fio(name, surname, patronymic)


'''
–°—É–º–º–∞ —Ü–∏—Ñ—Ä
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é print_digit_sum(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ num –∏ –≤—ã–≤–æ–¥–∏—Ç –Ω–∞ –ø–µ—á–∞—Ç—å —Å—É–º–º—É –µ–≥–æ —Ü–∏—Ñ—Ä.
'''
# def print_digit_sum(num):
#     digits = list(str(num))
#     for i in range(len(digits)):  # or print(sum([int(i) for i in str(num)])) or print(sum(map(int, str(n))))
#         digits[i] = int(digits[i])
#     print(sum(digits))
#
# n = int(input())

# –í —Ç–µ–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π num. –ê –≤ —Ç–µ–ª–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ n.
# print_digit_sum(n)

# def func():
#     global str_global  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –º—ã –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å
#     global num_global  # —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ str_global –∏ num_global.
#
#     str_global = str_global + ' –¥–æ–±–∞–≤–∫–∞ –∏–∑ –ª–æ–∫–∞–ª'  # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–∞–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
#     num_global = 123456789  # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ.
#
#
# str_global = '–°—Ç—Ä–æ–∫–∞ –≥–ª–æ–±–∞–ª'  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∏–ø–∞ —Å—Ç—Ä–æ–∫–∞ (string).
# num_global = 2002  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–µ–ª–æ–≥–æ —Ç–∏–ø–∞ ( int  ).
#
# print(f'–°—Ç—Ä–æ–∫–∞ "{str_global}"; –ß–∏—Å–ª–æ "{num_global}"')  # –î–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
#
# func()  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.
#
# print(f'–°—Ç—Ä–æ–∫–∞ "{str_global}"; –ß–∏—Å–ª–æ "{num_global}"')  # –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.


# —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥—Ä–∞–¥—É—Å–æ–≤ –§–∞—Ä–µ–Ω–≥–µ–π—Ç–∞ –≤ –≥—Ä–∞–¥—É—Å—ã –¶–µ–ª—å—Å–∏—è
# def convert_to_celsius(temp):
#     result = (5 / 9) * (temp - 32)
#     return result
#
# # –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
# temp = float(input('B–≤e–¥–∏—Çe –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–¥—É—Å–æ–≤ –ø–æ –§–∞—Ä–µ–Ω–≥–µ–π—Ç—É: '))
# celsius = convert_to_celsius(temp)
# print(round(celsius))  # –≥—Ä–∞–¥—É—Å—ã –¶–µ–ª—å—Å–∏—è


'''
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –µ–≥–æ –∫–∞—Ç–µ—Ç–æ–≤.
–î–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –¥–ª–∏–Ω—ã –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã, –Ω–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–æ—Ä–µ–º—É –ü–∏—Ñ–∞–≥–æ—Ä–∞: –∫–≤–∞–¥—Ä–∞—Ç –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã —Ä–∞–≤–µ–Ω —Å—É–º–º–µ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –∫–∞—Ç–µ—Ç–æ–≤.
–î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –µ—Å–ª–∏ a, b ‚Äì –¥–ª–∏–Ω—ã –∫–∞—Ç–µ—Ç–æ–≤, –∞ c ‚Äì –¥–ª–∏–Ω–∞ –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã, —Ç–æ –∏–º–µ–µ—Ç –º–µ—Å—Ç–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ:
c**2 = a**2 + b**2 => c = sqrt(a**2+b**2)
Note: –í –º–æ–¥—É–ª–µ math –∏–º–µ–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è hypot(x, —É) –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã
–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –∫–∞—Ç–µ—Ç–∞–º–∏ x –∏ y.
'''
# def hypotenuse_length(a, b):
#     c = (a ** 2 + b ** 2) ** 0.5
#     return c

# print(hypotenuse_length(4, 5))
#
# x, y = int(input()), int(input())
# hypotenuse = hypotenuse_length(x, y)
# print(hypotenuse)


'''
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_distance(x1, y1, x2, y2), –≤—ã—á–∏—Å–ª—è—é—â—É—é —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ (x1; y1) –∏ (x2; y2)
–†–µ—à–µ–Ω–∏–µ. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (x1; y1) –∏ (x2; y2) –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
œÅ = sqrt{(x_1-x_2)^2 + (y_1-y_2)^2}
–ù–µ—Å–ª–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å, —á—Ç–æ –∏—Å–∫–æ–º–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ‚Äì —ç—Ç–æ –¥–ª–∏–Ω–∞ –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –∫–∞—Ç–µ—Ç–∞–º–∏ —Ä–∞–≤–Ω—ã–º–∏
 |x1 - x2| –∏ |y1-y2|
'''
# def get_distance(x1, y1, x2, y2):
#     return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5


# def get_distance(x1, y1, x2, y2):
#     return hypotenuse_length(x1 - x2, y1 - y2)


# x1, y1 = float(input()), float(input())  # —Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
# x2, y2 = float(input()), float(input())  # —Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
#
# print(get_distance(x1, y1, x2, y2))      # –≤—ã—á–∏—Å–ª—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏


'''
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é sum_digits(n), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —Å—É–º–º—É –µ–≥–æ —Ü–∏—Ñ—Ä.
'''
# def sum_digits(n):
#     result = 0
#     while n != 0:
#         result += n % 10
#         n //= 10
#     return result
#
#
# n = int(input())
# print(sum_digits(n))


'''
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é compute_average(numbers), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –∏
–≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞.
'''
# def compute_average(numbers):
#     return sum(numbers) / len(numbers)
#
#
# numbers = [1, 3, 5, 1, 6, 8, 10, 2]
# print(compute_average(numbers))

'''
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é convert_to_miles(km), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–∏–ª—è—Ö. –§–æ—Ä–º—É–ª–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: –º–∏–ª–∏ = –∫–∏–ª–æ–º–µ—Ç—Ä—ã * 0.6214.
'''
# def convert_to_miles(km):
#     return km * 0.6214
#
#
# num = int(input())
#
# print(convert_to_miles(num))

'''
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_days(month), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
–≤ –¥–∞–Ω–Ω–æ–º –º–µ—Å—è—Ü–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 12.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –≥–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–≤–∏—Å–æ–∫–æ—Å–Ω—ã–º.
'''
# def get_days(month):
#     if month == 2:
#         return 28
#     if month in (4, 6, 9, 11):
#         return 30
#     return 31

# or
#     m = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
#     return m[month - 1]

# or
#     return [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1]


# num = int(input())
# print(get_days(num))

'''
–î–µ–ª–∏—Ç–µ–ª–∏ 1
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_factors(num), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö
–¥–µ–ª–∏—Ç–µ–ª–µ–π –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞.
'''
# def get_factors(num):
#     factors = list()
#     for i in range(1, num + 1):
#         if num % i == 0:
#             factors.append(i)
#     return factors

# or
# return [i for i in range(1, num + 1) if num % i == 0]

# n = int(input())
# print(get_factors(n))


'''
–î–µ–ª–∏—Ç–µ–ª–∏ 2
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é number_of_factors(num), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
–¥–µ–ª–∏—Ç–µ–ª–µ–π –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é get_factors(num) –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏
'''
# def get_factors(num):
#     return [i for i in range(1, num + 1) if num % i == 0]
#
#
# def number_of_factors(num):
#     return len(get_factors(num))
#
#
# n = int(input())
# print(number_of_factors(n))

'''
–ù–∞–π—Ç–∏ –≤—Å–µ—Ö
–ù–∞–ø–æ–º–Ω–∏–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ find('a') –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ a –≤ —Å—Ç—Ä–æ–∫–µ.
–ü—Ä–æ–±–ª–µ–º–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∞.

–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–º–µ–Ω–µ–º find_all(target, symbol), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: —Å—Ç—Ä–æ–∫—É target –∏ —Å–∏–º–≤–æ–ª symbol
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ, —Ç–æ —Å–ª–µ–¥—É–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
'''
# def find_all(target, symbol):
    # all_symbols = list()
    # while symbol in target:
    #     all_symbols.append(target.find(symbol))
    #     target = target.replace(symbol, "*", 1)  # better: target.replace(symbol,chr(ord(symbol)-1),1)
    # return all_symbols

    # or
    # all_symbols = list()
    # for i in range(len(target)):
    #     if target[i] == symbol:
    #         all_symbols.append(i)
    # return all_symbols

    # or
    # return [i for i in range(len(target)) if target[i] == symbol]


# s = input()
# char = input()
#
# print(find_all(s, char))


'''
Merge lists 1
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é merge(list1, list2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å–ø–∏—Å–∫–∞,
—Å–æ—Å—Ç–æ—è—â–∏—Ö –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–ø–∏—Å–∫–∏ list1 –∏ list2 –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ä–∞–∑–Ω—É—é –¥–ª–∏–Ω—É.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ sort(), –∞ –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏—Å—å –∏ –±–µ–∑ –Ω–µ–≥–æ
'''
# list.sort() —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫, –∞ sorted(list) —Å–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
# –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
# –º–µ—Ç–æ–¥ .sort() –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ —Å–ø–∏—Å–∫–∞–º, —Ñ—É–Ω–∫—Ü–∏—è sorted() –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ
# –î–ª—è —Å–ø–∏—Å–∫–æ–≤ list.sort() –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º sorted() –ø–æ—Ç–æ–º—É —á—Ç–æ –µ–º—É –Ω–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–ø–∏—é.
# –î–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ - sorted()
# https://www.rupython.com/sorted-list-vs-list-sort-2667.html

# def merge(list1, list2):
    # list1 += list2
    # list1.sort()
    # return list1

# or
#     list1 += list2
#     return sorted(list1)

# or
#     return sorted(list1 + list2)
#
# numbers1 = [int(c) for c in input().split()]
# numbers2 = [int(c) for c in input().split()]
# print(merge(numbers1, numbers2))

# Other solution. Without .sort() method
# def merge(list1, list2):
#     first, second = list1[:], list2[:]
#     result = []
#
#     while first and second:
#         if first[0] <= second[0]:
#             item = first.pop(0)
#         else:
#             item = second.pop(0)
#         result.append(item)
#
#     result.extend(first if first else second)
#     return result
#
#
# numbers1 = [int(c) for c in input().split()]
# numbers2 = [int(c) for c in input().split()]
#
# print(merge(numbers1, numbers2))


'''
–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏, –∑–Ω–∞–π—Ç–µ —á—Ç–æ .append() —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ —á–µ–º +=, –∞ += –±—ã—Å—Ç—Ä–µ–µ —á–µ–º .extend() –∏–∑ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
'''

'''For time counting'''
# from datetime import datetime
#
# start_time = datetime.now()
#
# # –≤—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–¥ —Å—é–¥–∞
#
#
# end_time = datetime.now()
#
# print('Duration: {}'.format(end_time - start_time))


'''
Merge sort for one list
'''
# def merge_sort(A):
#     if len(A) == 1 or len(A) == 0:
#         return A
#     L, R = A[:len(A) // 2], A[len(A) // 2:]
#     merge_sort(L)
#     merge_sort(R)
#     n = m = k = 0
#     C = [0] * (len(L) + len(R))
#     while n < len(L) and m < len(R):
#         if L[n] <= R[m]:
#             C[k] = L[n]
#             n += 1
#         else:
#             C[k] = R[m]
#             m += 1
#         k += 1
#     while n < len(L):
#         C[k] = L[n]
#         n += 1
#         k += 1
#     while m < len(R):
#         C[k] = R[m]
#         m += 1
#         k += 1
#     for i in range(len(A)):
#         A[i] = C[i]
#     return A
#
#
# A = [6, 5, 3, 1, 8, 4, 7, 2]
# print(merge_sort(A))

'''
Merge sort for 2 already sorted lists
'''
# def quick_merge(list1, list2):
#     result = []
#
#     p1 = 0  # —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ list1
#     p2 = 0  # —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ list2
#
#     while p1 < len(list1) and p2 < len(list2):  # –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
#         if list1[p1] <= list2[p2]:
#             result.append(list1[p1])
#             p1 += 1
#         else:
#             result.append(list2[p2])
#             p2 += 1
#
#     if p1 < len(list1):  # –ø—Ä–∏—Ü–µ–ø–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
#         result += list1[p1:]
#     if p2 < len(list2):
#         result += list2[p2:]
#
#     return result
#
#
# list1 = [3, 10, 11, 12, 47, 57, 58, 63, 77, 79, 80, 95]
# list2 = [0, 11, 12, 20, 24, 26, 47, 48, 53, 65, 70, 81, 84, 84, 90]
# list3 = quick_merge(list1, list2)
# print(list3)

'''
Merge lists 2
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º n —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º
–ø—Ä–æ–±–µ–ª–∞. –ò–∑ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è —Å–ø–∏—Å–∫–∏ —á–∏—Å–µ–ª.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ quick_merge(),
–∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ.
'''
# def quick_merge():
#     result = []
#     for i in range(int(input())):
#         result.extend(int(c) for c in input().split())
#     result.sort()
#     return result
#
# print(*quick_merge())


# Other solution with reuse quick_merge() function
# def quick_merge(list1, list2):
#     result = []
#
#     p1 = 0  # —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ list1
#     p2 = 0  # —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ list2
#
#     while p1 < len(list1) and p2 < len(list2):  # –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
#         if list1[p1] <= list2[p2]:
#             result.append(list1[p1])
#             p1 += 1
#         else:
#             result.append(list2[p2])
#             p2 += 1
#
#     if p1 < len(list1):  # –ø—Ä–∏—Ü–µ–ø–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
#         result += list1[p1:]
#     elif p2 < len(list2):
#         result += list2[p2:]
#
#     return result
#
#
# lst = list()
# for _ in range(int(input())):
#     lst = quick_merge(lst, [int(i) for i in input().split()])
# print(*lst)

# or
# total_list = []
# for i in range(int(input())):
#     num = [int(q) for q in input().split()]
#     total_list = quick_merge(total_list, num)
# print(*total_list)

# or
# a_list = []
# lists = [[int(i) for i in input().split()] for _ in range(int(input()))]
#
# for i in range(len(lists)):
#     a_list = quick_merge(a_list, lists[i])
# print(*a_list)


# List slices
# s = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
# print(s[:0:-3])  # [9, 6, 3]
# print(s[-1:0:-3])  # [9, 6, 3]
# print(s[::-3])  # [9, 6, 3, 0]


# Bool function
# def is_even(num):
#     return num % 2 == 0
#
# for i in range(10):
#     print(is_even(i))


'''
Is Valid Triangle?
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_valid_triangle(side1, side2, side3), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ç—Ä–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞,
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ–≤—ã—Ä–æ–∂–¥–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ side1, side2, side3 –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
'''
# def is_valid_triangle(side1, side2, side3):
#     return side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1
#
#
# # or
# def is_valid_triangle(*sides):  # –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∑–≤–µ–∑–¥–æ—á–∫–∞ –∑–∞–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω –∫–æ—Ä—Ç–µ–∂
#     return sum(sides) - max(sides) > max(sides)
#
# a, b, c = int(input()), int(input()), int(input())
# print(is_valid_triangle(a, b, c))


'''
Is a Number Prime? üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_prime(num), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True,
–µ—Å–ª–∏ —á–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
'''
# def is_prime(num):
#     if num == 1:
#         return False
#     for i in range(2, num // 2 + 1):  # or (2, int(n**0.5)+1)
#         if num % i == 0:
#             return False
#     return True

# other solution
# def is_prime(num):
#     return len([i for i in range(1, num+1) if num % i == 0]) == 2


# n = int(input())
# print(is_prime(n))

# a, b = int(input()), int(input())
# for i in range(a, b + 1):
#     count = 0
#     if i == 1:
#         continue
#     for j in range(2, i // 2 + 1):
#         if i % j == 0:
#             count += 1
#     if count == 0:
#         print(i)


'''
Next Prime üå∂Ô∏èüå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_next_prime(num), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ num –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤–æ–µ
–ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ–µ —á–∏—Å–ª–∞ num.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_prime() –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–∏.
'''
# def is_prime(num):
#     if num == 1:
#         return False
#     for i in range(2, num // 2 + 1):  # or (2, int(n**0.5)+1)
#         if num % i == 0:
#             return False
#     return True
#
#
# def get_next_prime(num):
#     num += 1
#     while not is_prime(num):
#         num += 1
#     return num
#
#
# n = int(input())
# print(get_next_prime(n))


'''
Good password üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_password_good(password), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è password
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–¥–µ–∂–Ω—ã–º –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–¥–µ–∂–Ω—ã–º –µ—Å–ª–∏:
–µ–≥–æ –¥–ª–∏–Ω–∞ –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤; 
–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É (–≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä); 
–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä);
–æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É.
'''
# def is_password_good(password):
#     digit, small, big = 0, 0, 0
#     if len(password) < 8:
#         return False
#     for i in password:
#         if i.isdigit():
#             digit += 1
#         elif i.isalpha() and i.islower():
#             small += 1
#         elif i.isalpha() and i.isupper():
#             big += 1
#     if digit > 0 and small > 0 and big > 0:
#         return True
#     return False

# Other solution
# def is_password_good(password):
#     if len(password) < 8:
#         return False
#     flag1 = False
#     flag2 = False
#     flag3 = False
#     for c in password:
#         if c.isupper():
#             flag1 = True
#         elif c.islower():
#             flag2 = True
#         elif c.isdigit():
#             flag3 = True
#     return flag1 and flag2 and flag3
#
# Other solution
# def is_password_good(password):
#     return len(password) > 7 and password != password.lower() and password != password.upper() and not password.isalpha()

# Other solution
# def is_password_good(password):
#     upp = [i for i in password if i.isupper()]
#     low = [i for i in password if i.islower()]
#     dig = [i for i in password if i.isdigit()]
#     return all([len(password) >= 8, upp, low, dig])

'''Explanation:
–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è all(–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏—Å—Ç–∏–Ω–Ω—ã–µ
(–∏–ª–∏, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—É—Å—Ç–∞). –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–∂–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—ë—Ç False.

all([]) # True
all([True, True, True])  # True
all([True, True, False])  # False

all([[1, 2], [], [5, 2]]) # False
all([['a', 'b'], [4, 5], ['3', 8]]) # True

all([1, 2, 0])  # False
all([1, 2, 3])  # True

all([1 == 1, 2 < 3, 5 >= 4]) # True
all([2 == 3, 0 < 5, 9 > 4]) # False
–ï—Å–ª–∏ –≤ password –Ω–µ—Ç –±–æ–ª—å—à–∏—Ö –±—É–∫–≤, —Ç–æ —Å–ø–∏—Å–æ–∫ upp –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π, –µ—Å–ª–∏ –Ω–µ—Ç –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ç–æ low, –∞ –µ—Å–ª–∏ –Ω–µ—Ç —Ü–∏—Ñ—Ä, —Ç–æ –ø—É—Å—Ç–æ–π
–±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ dig. –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ = False, –Ω–µ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ = True. –ü–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –ø—É—Å—Ç –∏–ª–∏
–¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è < 8, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è all() –≤–µ—Ä–Ω—ë—Ç False  –ê –µ—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ all() –∏—Å—Ç–∏–Ω–Ω—ã - –≤–µ—Ä–Ω—ë—Ç True

–ì–æ–≤–æ—Ä—è, –ø—Ä–æ all()  –Ω–µ–ª—å–∑—è –Ω–µ —Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ any()
–ï—Å—Ç—å –≤ python   –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è all() –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è any(iterable), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True,
–µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —ç–ª–µ–º–µ–Ω—Ç iterable –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–∏–Ω—É. –ï—Å–ª–∏ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è False.

any([])  # False

any([False, False, False])  # False
any([False, True, False])  # True

any([0, 0, 0, 0])  # False
any([0, 1, 0, 0])  # True
'''

# txt = input()
# print(is_password_good(txt))

'''
–†–æ–≤–Ω–æ –≤ –æ–¥–Ω–æ–º
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_one_away(word1, word2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∞ —Å–ª–æ–≤–∞ word1 –∏ word2
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É –∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ä–æ–≤–Ω–æ –≤ 1 —Å–∏–º–≤–æ–ª–µ –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
'''
# def is_one_away(word1, word2):
#     if len(word1) != len(word2):
#         return False
#     count = 0
#     for i in range(len(word1)):
#         if word1[i] != word2[i]:
#             count += 1
#     return count == 1
#
# # Other solution
# def is_one_away(word1, word2):
#     return len(word1) == len(word2) and len([i for i in range(len(word1)) if word1[i] != word2[i]]) == 1
#
# txt1 = input()
# txt2 = input()
# print(is_one_away(txt1, txt2))

'''
–ü–∞–ª–∏–Ω–¥—Ä–æ–º üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_palindrome(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É text –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True,
–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü–∞–ª–∏–Ω–¥—Ä–æ–º ‚Äì —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—á–∏—Ç–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–≤—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏, –∞ —Ç–∞–∫–∂–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã,
–∞ —Ç–∞–∫–∂–µ —Å–∏–º–≤–æ–ª—ã , . ! ? -.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
print(is_palindrome('–ê —Ä–æ–∑–∞ —É–ø–∞–ª–∞ –Ω–∞ –ª–∞–ø—É –ê–∑–æ—Ä–∞.'))  - True
print(is_palindrome('Gabler Ruby - burrel bag!'))  - True
print(is_palindrome('BEEGEEK'))  - False
'''
# def is_palindrome(text):
#     lst_palindr = [i.lower() for i in text if i.isalpha()]
#     return lst_palindr == lst_palindr[::-1]
#
# # Other solution
# def is_palindrome(text):
#     phrase = ''.join([a for a in text if a.isalpha()]).lower()
#     return phrase == phrase[::-1]
#
# Other solution
# def is_palindrome(text):
#     t = [c.lower() for c in text if c not in ', .!?-']
#     return t == list(reversed(t))
#
# txt = input()
# print(is_palindrome(txt))


'''
BEEGEEK
BEEGEEK –Ω–∞–∫–æ–Ω–µ—Ü –æ—Ç–∫—Ä—ã–ª —Å–≤–æ–π –±–∞–Ω–∫ –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–∞–Ω–∫–æ–º–∞—Ç—ã —Å –Ω–µ–æ–±—ã—á–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º.
–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å BEEGEEK –±–∞–Ω–∫–∞ –∏–º–µ–µ—Ç –≤–∏–¥ a:b:c, –≥–¥–µ a, b –∏ c ‚Äì –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞.
–ü–æ—Å–∫–æ–ª—å–∫—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å BEEGEEK —Ñ–∞–Ω–∞—Ç–µ–µ—Ç –æ—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, —Ç–æ –æ–Ω —Ä–µ—à–∏–ª:

—á–∏—Å–ª–æ a ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º;
—á–∏—Å–ª–æ b ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º;
—á–∏—Å–ª–æ c ‚Äì –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–Ω—ã–º.
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_valid_password(password), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è password
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º BEEGEEK –±–∞–Ω–∫–∞ –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
print(is_valid_password('1221:101:22'))  - True
print(is_valid_password('565:30:50'))    - False
print(is_valid_password('112:7:9'))      - False
print(is_valid_password('1221:101:22:22'))  - False
'''
# def is_palindrome(text):
#     lst_palindr = [i for i in text if i.isdigit()]
#     return lst_palindr == lst_palindr[::-1]
#
# def is_prime(num):
#     if num == 1:
#         return False
#     for i in range(2, num // 2 + 1):
#         if num % i == 0:
#             return False
#     return True
#
# def is_valid_password(password):
#     pass_lst = [int(i) for i in password.split(':')]
#     return len(pass_lst) == 3 and is_palindrome(str(pass_lst[0])) and is_prime(pass_lst[1]) and pass_lst[2] % 2 == 0
#
# # Other solution
# # def is_valid_password(password):
# #     password = password.split(':')
# #     a, b, c = password[0], int(password[1]), int(password[2])
# #     if len(password) != 3 or a != a[::-1] or c % 2 != 0:
# #         return False
# #     for i in range(2, b):
# #         if b % i == 0:
# #             return False
# #     return True
#
#
# psw = input()
# print(is_valid_password(psw))

'''
–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∫–æ–±–æ—á–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å üå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_correct_bracket(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É text, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑
—Å–∏–º–≤–æ–ª–æ–≤ ( –∏ ) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ True, –µ—Å–ª–∏ –ø–æ—Å—Ç—É–ø–∏–≤—à–∞—è –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∫–æ–±–æ—á–Ω–æ–π
–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–∫–æ–±–æ—á–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è —Ç–æ–ª—å–∫–æ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ ( –∏ ),
–≥–¥–µ –∫–∞–∂–¥–æ–π –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–µ –Ω–∞–π–¥–µ—Ç—Å—è –ø–∞—Ä–Ω–∞—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥:
print(is_correct_bracket('()(()())'))  - True
print(is_correct_bracket(')(())('))    - False
())(()  - False
'''
# def is_correct_bracket(text):
#     if text.startswith(')') or text.endswith('(') or text.count('(') != text.count(')'):
#         return False
#
#     text_list = list(text)
#     length = len(text_list)
#     while length > 1:
#         text_list.remove('(')
#         text_list.remove(')')
#         if not len(text_list):  # use 'not' instead of len(text_list) == 0   For sequences, (strings, lists, tuples),
#             return True                                      # use the fact that empty sequences are false
#         if text_list[0] == ')':
#             return False
#         length = len(text_list)
#     return True
#
#
# txt = input()
# print(is_correct_bracket(txt))
# Explanation: https://stackoverflow.com/questions/43121340/why-is-the-use-of-lensequence-in-condition-values-considered-incorrect-by-pyli

# Other solution
# def is_correct_bracket(text):
#     count = 0
#     for i in text:
#         if i == '(':
#             count += 1
#         elif i == ')':
#             count -= 1
#         if count < 0:
#             return False
#     return count == 0

# Other solution
# def is_correct_bracket(text):
#     while '()' in text:
#         text = text.replace('()', '')
#     return not text
# –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ text –º—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –µ—ë –∫–∞–∫ –ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - False, –Ω–µ–ø—É—Å—Ç–∞—è - True)
# –û–ø–µ—Ä–∞—Ç–æ—Ä not –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∏—Ç True –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –∞ –ø—É—Å—Ç–∞—è –æ–Ω–∞
# —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∫–æ–±–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è.


'''
A list of the fruit contains fruit_name and property saying its fruit. Another list consume has two items juice and eat.
With the help of pop() and append() we can do something interesting. 
'''
# fruit = [['Orange', 'Fruit'], ['Banana', 'Fruit'], ['Mango', 'Fruit']]
# consume = ['Juice', 'Eat']
# possible = []
#
# for item in fruit:
#     for use in consume:
#         item.append(use)
#         possible.append(item[:])
#         item.pop(-1)
# print(possible)

'''
–ó–º–µ–∏–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é convert_to_python_case(text), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫—É –≤ CamelCase –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç
–µ–≥–æ –≤ snake_case.  ThisIsCamelCased -> this_is_camel_cased
'''
# def convert_to_python_case(text):
#     text1 = text[0]
#     for i in range(1, len(text)):
#         if text[i].islower() or text[i].isdigit():
#             text1 += text[i]
#         elif text[i].isupper():
#             text1 += '_' + text[i]
#     return text1.lower()

# Other solution
# def convert_to_python_case(text):
#     s = ''
#     for i in text:
#         if i.isupper():
#             i = '_' + i.lower()
#         s = s + i
#     return s[1:]

# Other solution
# def convert_to_python_case(text):
#     text = text[0].lower() + text[1:]
#     for i in text:
#         if i.isupper():
#             text = text.replace(i, '_'+i.lower(), 1)
#     return text

# Other solution
# def convert_to_python_case(text):
#     for i in text:
#         if i in 'QWERTYUIOPASDFGHJKLZXCVBNM':
#             text = text.replace(i, '_' + i.lower())
#     return text[1:]
#
# txt = input()
# print(convert_to_python_case(txt))

'''
–°–µ—Ä–µ–¥–∏–Ω–∞ –æ—Ç—Ä–µ–∑–∫–∞
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_middle_point(x1, y1, x2, y2), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–Ω—Ü–æ–≤ –æ—Ç—Ä–µ–∑–∫–∞
(x_1; y_1) –∏ (x_2; y_2) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏, —è–≤–ª—è—é—â–µ–π—Å—è —Å–µ—Ä–µ–¥–∏–Ω–æ–π –¥–∞–Ω–Ω–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–µ—Ä–µ–¥–∏–Ω—ã –æ—Ç—Ä–µ–∑–∫–∞ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ: ((x1+x2)/2; (y1+y2)/2)
'''
# def get_middle_point(x1, y1, x2, y2):
#     return (x1 + x2) / 2, (y1 + y2) / 2
#
#
# x_1, y_1 = int(input()), int(input())
# x_2, y_2 = int(input()), int(input())
# x, y = get_middle_point(x_1, y_1, x_2, y_2)
# print(x, y)


'''
–ü–ª–æ—â–∞–¥—å –∏ –¥–ª–∏–Ω–∞
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_circle(radius), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ä–∞–¥–∏—É—Å –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è:
–¥–ª–∏–Ω—É –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–∞–Ω–Ω–æ–π –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å—é.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª–∏–Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –∏ –ø–ª–æ—â–∞–¥—å –∫—Ä—É–≥–∞ —Ä–∞–¥–∏—É—Å–∞ r –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º: –°=2œÄr,S=œÄr**2
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –î–ª—è —á–∏—Å–ª–∞ œÄ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏–∑ –º–æ–¥—É–ª—è math.
'''
# from math import pi
# def get_circle(radius):
#     c = 2 * pi * radius
#     s = pi * radius ** 2
#     return c, s
#
#
# r = float(input())
# length, square = get_circle(r)
# print(length, square)  # 9.42477796076938 7.0685834705770345
# print(get_circle(r))  # (9.42477796076938, 7.0685834705770345)


'''
–ö–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è üå∂Ô∏èüå∂Ô∏è
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é solve(a, b, c), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ç—Ä–∏ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ a, b, c ‚Äì –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —É—Ä–∞–≤–Ω–µ–Ω–∏—è ax^2+bx+c = 0 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–æ—Ä–Ω–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–µ–µ—Ç –∫–æ—Ä–Ω–∏.
It's based on one of the previous task:  –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ üå∂Ô∏èüå∂Ô∏è
https://stepik.org/lesson/265110/step/7?unit=246058

from math import pow, sqrt

a, b, c = float(input()), float(input()), float(input())
D = pow(b, 2) - 4 * a * c

if D > 0:
    x1 = (-b + sqrt(D)) / (2 * a)
    x2 = (-b - sqrt(D)) / (2 * a)
    if x1 < x2:
        print(x1, x2, sep="\n")
    else:
        print(x2, x1, sep="\n")
elif D == 0:
    x1 = (-b + sqrt(D)) / (2 * a)
    print(x1)
else:
    print("–ù–µ—Ç –∫–æ—Ä–Ω–µ–π")
'''
# from math import pow, sqrt
#
# def solve(a, b, c):
#     d = pow(b, 2) - 4 * a * c
#     x1 = (-b + sqrt(d)) / (2 * a)
#     x2 = (-b - sqrt(d)) / (2 * a)
#     return min(x1, x2), max(x1, x2)
#
# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# a, b, c = int(input()), int(input()), int(input())
#
# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# x1, x2 = solve(a, b, c)
# print(x1, x2)
