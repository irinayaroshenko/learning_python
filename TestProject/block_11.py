# list1 = ["a", "b", "c", "d"]
# list2 = [1, 2, 3, 4, 5]
# print(list1)   # ['a', 'b', 'c', 'd']
# print(*list1)  # a b c d
# print(" ".join(list1))  # a b c d
# print("::".join(list1))  # a::b::c::d
# print(list2)  # [1, 2, 3, 4, 5]

''' –°–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –æ–¥–Ω–æ —á–∏—Å–ª–æ nn. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ [1, 2, 3, ..., n]. '''
# print(list(range(1, int(input()) + 1)))

'''
–°–ø–∏—Å–æ–∫ –±—É–∫–≤
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –æ–¥–Ω–æ —á–∏—Å–ª–æ n. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫,
—Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ n –±—É–∫–≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ ['a', 'b', 'c', ...] –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.'''
# n, abc_list = int(input()), list()
# for i in range(97, n + 97):
#     abc_list += chr(i)
# print(abc_list)

# Other solution
# alphabet = list('abcdefghijklmnopqrstuvwxyz')
# print(alphabet[:int(input())])

# Other solution
# n = int(input())
# s = 'abcdefghijklmnopqrstuvwxyz'
# print(list(s[:n]))

# Other solution
# n = int(input())
# s = ''
# for i in range(n):
#     s += chr(97 + i)
# print(list(s))

'''Check if list contains some element'''
# numbers = [2, 4, 6, 8, 10]
# print("Number 2 is {}in numbers.".format("" if 2 in numbers else "not "))
#
# print([1, 2, 3, 4] + [5, [6], [7], 8])
# print([7, 8] * 3)
# print([0] * 10)

# —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–¥–æ–º –ø–æ–≤—Ç–æ—Ä–æ—è—é—â–∏—Ö—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ —Å–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è —Å–ø–∏—Å–∫–∞–º–∏
# lst = [[0]]*10
# lst1 = [[0] * 10]*10
# print(lst)
# print(lst1)
# –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤–µ–ª–æ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –û—á–µ–≤–∏–¥–Ω–æ,
# —Å–ø–∏—Å–æ–∫ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
# lst[0][0] = 4
# print(lst)
# lst1[0][0] = 2
# print(lst1)

# numbers = [12.5, 3.1415, 2.718, 9.8, 1.414, 1.1618, 1.324]
# print(max(numbers) + min(numbers))  # 13.6618
# print(sum([max(numbers), min(numbers)]))  # 13.6618  Here min & max aregiven as list
# print(sum((max(numbers), min(numbers))))  # 13.6618

'''–≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ evens'''
# evens = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
# average = sum(evens) / len(evens)
# print(average)

'''–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —Ç–∞–∫ —á—Ç–æ–±—ã —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∏–º–µ—é—â–∏–π –∑–Ω–∞—á–µ–Ω–∏–µ Green
–∑–∞–º–µ–Ω–∏–ª—Å—è –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ó–µ–ª–µ–Ω—ã–π, –∞ —ç–ª–µ–º–µ–Ω—Ç Violet –Ω–∞ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π. –î–∞–ª–µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.'''
# rainbow = ['Red', 'Orange', 'Yellow', 'Green', 'Blue', 'Indigo', 'Violet']
# rainbow[3] = '–ó–µ–ª–µ–Ω—ã–π'
# rainbow[-1] = '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π'
# rainbow[3::3] = ['–ó–µ–ª–µ–Ω—ã–π', '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π']  # step 3
'''Two lines below work correctly if they are present in list once but –µ—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ Green –∏–ª–∏ Violet –±—É–¥–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è
–±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞, —Ç–æ –∑–∞–º–µ–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ, –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ –∑–∞–º–µ–Ω—è—Ç—Å—è.'''
# rainbow[rainbow.index('Green')] = '–ó–µ–ª–µ–Ω—ã–π'  # method 'find' can't be used here because it doesn't work with lists (but works with strings)
# rainbow[rainbow.index('Violet')] = '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π'
# print(rainbow)

'''–≤—ã–≤–µ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ languages –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ'''
# languages = ['Chinese', 'Spanish', 'English', 'Hindi', 'Arabic', 'Bengali', 'Portuguese', 'Russian', 'Japanese',
#              'Lahnda']
# print(languages[::-1])
# print(list(reversed(languages)))
# languages.reverse()
# print(languages)

'''–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ (+) –∏ —É–º–Ω–æ–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–∞ —á–∏—Å–ª–æ (*) —Ç–∞–∫,
—á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª —Å–ø–∏—Å–æ–∫: [1, 2, 3, 1, 2, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 8, 9, 10, 11, 12, 13].'''
# numbers1 = [1, 2, 3]
# numbers2 = [6]
# numbers3 = [7, 8, 9, 10, 11, 12, 13]
# print(numbers1 * 2 + numbers2 * 9 + numbers3)

# num1 = [1, 2, 3]
# num1[1] = 1.5  # –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
# print(num1)    # [1, 1.5, 3]
# num2 = []
# num2[0] = 1  # –º—ã –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π
# print(num2)  # IndexError: list assignment index out of range

# methods append() and extend()
# numbers = [0, 2, 4, 6, 8, 10]
# odds = [1, 3, 5, 7]
# numbers.extend(odds)
# print(numbers)       # [0, 2, 4, 6, 8, 10, 1, 3, 5, 7]
# numbers.append(odds)
# print(numbers)       # [0, 2, 4, 6, 8, 10, 1, 3, 5, 7, [1, 3, 5, 7]]
#
# words1 = ['iq option', 'stepik', 'beegeek']
# words2 = ['iq option', 'stepik', 'beegeek']
# words1.append('python')   # ['iq option', 'stepik', 'beegeek', 'python']
# words2.extend('python')   # ['iq option', 'stepik', 'beegeek', 'p', 'y', 't', 'h', 'o', 'n']
# print(words1)
# print(words2)

'''
–í—Å–µ —Å—Ä–∞–∑—É 1 üå∂Ô∏è
–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω:

–í—ã–≤–µ–ª –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞;
–í—ã–≤–µ–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞;
–í—ã–≤–µ–ª —Å–ø–∏—Å–æ–∫ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–≤—Å–ø–æ–º–∏–Ω–∞–µ–º —Å—Ä–µ–∑—ã);
–í—ã–≤–µ–ª YES –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–∞ 5 –∏ 17, –∏ NO –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ;
–í—ã–≤–µ–ª —Å–ø–∏—Å–æ–∫ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º –ø–µ—Ä–≤—ã–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ö–∞–∂–¥—ã–π –≤—ã–≤–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.'''
# numbers = [2, 6, 3, 14, 10, 4, 11, 16, 12, 5, 4, 16, 1, 0, 8, 16, 10, 10, 8, 5, 1, 11, 10, 10, 12, 0, 0, 6, 14, 8, 2,
#            12, 14, 5, 6, 12, 1, 2, 10, 14, 9, 1, 15, 1, 2, 14, 16, 6, 7, 5]
# print(len(numbers))
# print(numbers[-1])
# print(numbers[::-1])
# if 5 in numbers and 17 in numbers:
#     print("YES")
# else:
#     print("NO")
# print(numbers[1:-1])

'''
–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º n —Å—Ç—Ä–æ–∫. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. —Å–æ–∑–¥–∞–µ—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
—Å–ø–∏—Å–æ–∫ –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ.'''
# n, list_of_strings = int(input()), []
# for i in range(n):
#     # s = input()
#     list_of_strings.append(input())
# print(list_of_strings)

# Other solution. It calls 'list comprehension'
# print([input() for _ in range(int(input()))])

'''
–ê–ª—Ñ–∞–≤–∏—Ç
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –≤—ã–≤–æ–¥—è—â—É—é —Å–ª–µ–¥—É—é—â–∏–π —Å–ø–∏—Å–æ–∫:
['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff', ...]
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 26 —Å–∏–º–≤–æ–ª–æ–≤ z.'''
# abc = []
# for i in range(26):
#     # char = chr(97 + i) * (1 + i)
#     # abc.append(char)
#     abc.append(chr(97 + i) * (1 + i))
# print(abc)

'''
–°–ø–∏—Å–æ–∫ –∫—É–±–æ–≤
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º n —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. —Å–æ–∑–¥–∞–µ—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö
—á–∏—Å–µ–ª —Å–ø–∏—Å–æ–∫ –∏—Ö –∫—É–±–æ–≤.'''
# cub_list = list()
# for _ in range(int(input())):
#     number = int(input())
#     cub_list.append(number ** 3)
# print(cub_list)

# Other solution
# print([int(input()) ** 3 for i in range(int(input()))])

'''
–°–ø–∏—Å–æ–∫ –¥–µ–ª–∏—Ç–µ–ª–µ–π
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. —Å–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –¥–µ–ª–∏—Ç–µ–ª–µ–π –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞.'''
# n = int(input())
# lst = list()
# for i in range(1, n + 1):
#     if n % i == 0:
#         lst.append(i)
# print(lst)

# Other solution
# n = int(input())
# divisors = []
# –ü—Ä–æ—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –¥–æ –ø–æ–ª–æ–≤–∏–Ω—ã —á–∏—Å–ª–∞, —Ç –∫ —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –¥–µ–ª–∏—Ç—å—Å—è –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ –±–æ–ª—å—à–µ–µ, —á–µ–º –ø–æ–ª–æ–≤–∏–Ω–∞ —Å–µ–±—è.
# –ü–æ—Å–ª–µ —Ü–∏–∫–ª–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ —Å–∞–º–æ —á–∏—Å–ª–æ –∏ –≤—ã–≤–æ–¥–∏–º
# for i in range(1, n // 2 + 1):
#     if not n % i:  # the same as n % 1 == 0 because False
#         divisors.append(i)
# divisors.append(n)
# print(divisors)

# Other solution
# n = int(input())
# x = [1]
# for i in range(2, n+1):
#     if n % i == 0:
#         x.append(i)
# print(x)

'''
–°—É–º–º—ã –¥–≤—É—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n‚â•2, –∞ –∑–∞—Ç–µ–º n —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. —Å–æ–∑–¥–∞–µ—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª —Å–ø–∏—Å–æ–∫, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Å—É–º–º —Å–æ—Å–µ–¥–Ω. —á–∏—Å–µ–ª (0 –∏ 1, 1 –∏ 2, 2 –∏ 3 –∏ —Ç.–¥.).'''
# n = int(input())
# number1, lst1 = int(input()), []
# for _ in range(n - 1):
#     number2 = int(input())
#     lst1.append(number1 + number2)
#     number1 = number2
# print(lst1)

'''
–£–¥–∞–ª–∏—Ç–µ –Ω–µ—á–µ—Ç–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º n —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. —Å–æ–∑–¥–∞–µ—Ç –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª —Å–ø–∏—Å–æ–∫, –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–æ—è—â–∏–µ –ø–æ –Ω–µ—á–µ—Ç–Ω—ã–º –∏–Ω–¥–µ–∫—Å–∞–º,
–∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä del.'''
# n, lst = int(input()), list()
# for _ in range(n):
#     number = int(input())
#     lst.append(number)
# del lst[1::2]
# print(lst)

'''
k-–∞—è –±—É–∫–≤–∞ —Å–ª–æ–≤–∞ üå∂Ô∏èüå∂Ô∏è
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n –∏ n —Å—Ç—Ä–æ–∫, –∞ –∑–∞—Ç–µ–º —á–∏—Å–ª–æ k ‚Äì –Ω–æ–º–µ—Ä –±—É–∫–≤—ã (–Ω—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –µ–¥–∏–Ω–∏—Ü—ã).
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. –≤—ã–≤–æ–¥–∏—Ç k-—É—é –±—É–∫–≤—É –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ï—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ, –∏ –≤ –Ω–∏—Ö –Ω–µ—Ç —Å–∏–º–≤–æ–ª–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º, —Ç–æ —Ç–∞–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ
–Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å.'''
# lst = []
# for _ in range(int(input())):
#     lst.append(input())
# k = int(input())
# for i in lst:
#     if len(i) >= k:
#         print(i[k - 1], end="")

# Other solution
# n = int(input())
# list1 = []
# for _ in range(n):
#     list1.append(input())
# k = int(input())
# for i in range(n):
#     element = list1[i]
#     print(element[k-1:k], end='')  # –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å—Ä–µ–∑–∞ lst[i][k-1:k] –∏–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è
# –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–∏–º–≤–æ–ª—É —Å—Ç—Ä–æ–∫–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å >= –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏, —Ç–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞
# "IndexError: string index out of range".
# –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏–µ –ø—É–Ω–∫—Ç–∞ 9.2 –∫—É—Ä—Å–∞ "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ä–µ–∑–∞ –±–æ–ª—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ, —Ç–æ —Å—Ä–µ–∑ —Å–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é
# —Å—Ç—Ä–æ–∫—É", –≤ —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ä–µ–∑–∞, –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É –Ω–µ—Ç, —Ç–æ –µ—Å—Ç—å —Å—Ä–µ–∑ –ª–∏–±–æ –≤–µ—Ä–Ω–µ—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É –∏–∑
# –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –ª–∏–±–æ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –Ω–µ –ø–æ–≤–µ–∑–ª–æ

'''
–°–∏–º–≤–æ–ª—ã –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º n —Å—Ç—Ä–æ–∫. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. —Å–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫
–∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ.'''
# lst = list()
# for _ in range(int(input())):
#     lst.extend(input())
# print(lst)  # ['s', 'g', 'f', 's', 'g', 'd']
# print(*lst)  # s g f s g d

# shopping_list = ['apples', 'pens', 'oatmeal cookies', 'notepad', 'brushes', 'paint', 'appled', 'penk']
# print(max(shopping_list))
# print(min(shopping_list))

'''
–í—ã–≤–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏'''
# numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(*numbers)
'''–í—ã–≤–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞, –∫–∞–∂–¥–æ–≥–æ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ'''
# numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(*numbers, sep='\n')   # 'sep=' not 'end='
'''
–ü–æ—Å–∫–æ–ª—å–∫—É —Å—Ç—Ä–æ–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–∏–º–≤–æ–ª—ã, –ø–æ–¥–æ–±–Ω–æ —Ç–æ–º—É, –∫–∞–∫ —Å–ø–∏—Å–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, —Ç–æ –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
—Ä–∞—Å–ø–∞–∫–æ–≤–∫—É —Å—Ç—Ä–æ–∫ —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É —Å–ø–∏—Å–∫–æ–≤. '''
# s = 'Python'
# print(*s)
# print()
# print(*s, sep='\n')

'''
–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª —Å—É–º–º—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ numbers.'''
# numbers = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
# summ = 0
# lst_square = []
# for i in range(len(numbers)):
#     square = numbers[i] ** 2
#     summ += square
# print(summ)
# or
# for num in numbers:
#     lst_square.append(num ** 2)
# print(sum(lst_square))

# Other solution
# numbers = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
# print(sum([i**2 for i in numbers]))

'''
–ó–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º n —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
–≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ x –≤—ã–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ f(x) = x**2 + 2x + 1, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞, –∑–∞—Ç–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –∞ –∑–∞—Ç–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–º–µ–µ–º:
f(1) = 1**2 + 2 * 1 + 1 = 4, f(2) = 2**2 + 2 * 2 + 1 = 9, f(3) = 3**2 + 2 * 3 + 1 = 16'''
# n = int(input())
# list1, list2 = [], []
# for _ in range(n):
#     list1.append(int(input()))
# for digit in list1:
#     x = digit ** 2 + 2 * digit + 1  # mathimatically this formula is the same as (x + 1) ** 2
#     list2.append(x)
# print(*list1, sep="\n")
# print()
# print(*list2, sep="\n")
# print(*list1, '', *list2, sep='\n')  # other print version

'''
Remove outliers
–ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞—É—á–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞, –±—ã–≤–∞–µ—Ç –ø–æ–ª–µ–∑–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏ —Å–∞–º–æ–µ
–º–∞–ª–µ–Ω—å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º n —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç.
—É–¥–∞–ª—è–µ—Ç –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –∏ –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π
—Å—Ç—Ä–æ–∫–µ, –Ω–µ –º–µ–Ω—è—è –∏—Ö –ø–æ—Ä—è–¥–æ–∫.'''
# n = int(input())
# lst = list()
# for _ in range(n):
#     lst.append(int(input()))
# lst.remove(max(lst))  # via remove
# lst.remove(min(lst))
# del lst[lst.index(max(lst))]  # via del
# del lst[lst.index(min(lst))]
# print(*lst, sep="\n")

'''
–ë–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n, –∞ –∑–∞—Ç–µ–º n —Å—Ç—Ä–æ–∫. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
—Å—Ç—Ä–æ–∫–∏, –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.'''
# n = int(input())
# lst = []
# for _ in range(n):
#     k = input()
#     if k not in lst:
#         lst.append(k)
# print(*lst, sep='\n')

'''
Google search - 1
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n, –∑–∞—Ç–µ–º n —Å—Ç—Ä–æ–∫, –∑–∞—Ç–µ–º –µ—â–µ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚Äî –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü–æ–∏—Å–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É —Å–∏–º–≤–æ–ª–æ–≤.'''
# lst = []
# for _ in range(int(input())):
#     lst.append(input())
# search = input().lower()
# for i in range(len(lst)):
#     if search in lst[i].lower():
#         print(lst[i])

# Other solution
# base = [input() for _ in range(int(input()))]
# search = input().casefold()
# for text in base:
#     if search in text.casefold():
#         print(text)

'''–º–µ—Ç–æ–¥—ã casefold and lower –≤–µ—Ä–Ω—É—Ç —Ä–∞–∑–Ω–æ–µ, –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö: –Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –≤–∞–∂–Ω–æ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
—Ç–µ–∫—Å—Ç–∞ —Å —Ä–µ–¥–∫–∏–º–∏/—É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –∏–∑ –º–Ω–æ–≥–∏—Ö –ø–∏—Å—å–º–µ–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ (–∞ –µ—Å–ª–∏ –±—ã –º—ã –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ ASCII, —Ç–æ –Ω–∞–º –±—ã
–±—ã–ª–æ –±–µ–∑ —Ä–∞–∑–Ω–∏—Ü—ã –∫–∞–∫–æ–π –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å), —Ç.–µ. –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥:'''
# some_string = "Flu√ü"
# print(some_string.lower())
# print(some_string.casefold())

'''
Google search - 2 üå∂Ô∏èüå∂Ô∏è
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n, –∑–∞—Ç–µ–º n —Å—Ç—Ä–æ–∫, –∑–∞—Ç–µ–º —á–∏—Å–ª–æ k ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤,
–∑–∞—Ç–µ–º k —Å—Ç—Ä–æ–∫ ‚Äî –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤—Å–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü–æ–∏—Å–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É —Å–∏–º–≤–æ–ª–æ–≤.'''

# lst1, search_lst = [], []
# lst2 = []
# for _ in range(int(input())):
#     lst1.append(input())
# for _ in range(int(input())):
#     search_lst.append(input().lower())
#
# for i in range(len(lst1)):
#     if search_lst[0] in lst1[i].lower():
#         lst2.append(lst1[i])
#
# for j in range(1, len(search_lst) + 1):
#     for k in range(len(lst2)):
#         if search_lst[j] not in lst2[k].lower():
#             del lst2[k]      # You can't do this way cause deleted element shifts the list and we get error
# print(lst2)

# My solution
# lst1, search_lst, lst2 = [], [], []
#
# for _ in range(int(input())):
#     lst1.append(input())
# for _ in range(int(input())):
#     search_lst.append(input().lower())
#
# for i in range(len(lst1)):
#     present_in_lst1 = True
#     for j in range(len(search_lst)):
#         if search_lst[j] not in lst1[i].lower():
#             present_in_lst1 = False
#             break
#     if present_in_lst1:
#         lst2.append(lst1[i])
# print(*lst2, sep="\n")

# Other solution
# s = [input() for _ in range(int(input()))]
# d = [input() for _ in range(int(input()))]
# for i in s:
#     for j in d:
#         if j.lower() not in i.lower():
#             break
#     else:
#         print(i)

'''
Negatives, Zeros and Positives
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn, –∞ –∑–∞—Ç–µ–º nn —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–Ω–∞—á–∞–ª–∞ –≤—ã–≤–æ–¥–∏—Ç
–≤—Å–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, –∑–∞—Ç–µ–º –Ω—É–ª–∏, –∞ –∑–∞—Ç–µ–º –≤—Å–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–≤–µ–¥–µ–Ω—ã –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã.'''
# list_evens, list_odds, list_zero = [], [], []
# for i in range(int(input())):
#     x = int(input())
#     if x < 0:
#         list_odds.append(x)
#     elif x == 0:
#         list_zero.append(x)
#     else:
#         list_evens.append(x)
# print(*list_odds, *list_zero, *list_evens, sep="\n")

# s = 'Python is the most powerful language'
# words = s.split()
# print(words)
#
# numbers = input().split()  # 12 334 5465 7 53 2 2 4 5 56
# print(numbers)             # ['12', '334', '5465', '7', '53', '2', '2', '4', '5', '56'] list of strings, not int
#
# for i in range(len(numbers)):
#     numbers[i] = int(numbers[i])
# print(numbers)            # [12, 334, 5465, 7, 53, 2, 2, 4, 5, 56] now we transform strings to int

# ip = '192.168.1.24'
# numbers_ip = ip.split('.')    # —É–∫–∞–∑—ã–≤–∞–µ–º —è–≤–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
# print(numbers_ip)             # ['192', '168', '1', '24']
#
# words = ['Python', 'is', 'the', 'most', 'powerful', 'language']
# print(''.join(words))
# print('*'.join(words))
# print('-'.join(words))
# print('?'.join(words))
# print('!'.join(words))
# print('*****'.join(words))
# print('abc'.join(words))
# print('123'.join(words))

'''
–°—É—â–µ—Å—Ç–≤—É–µ—Ç –±–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–æ–≤ s.split() –∏ s.split(' ').
–†–∞–∑–Ω–∏—Ü–∞ –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª–æ–≤ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏.'''
# s = 'Python    is   the  most  powerful  language'
# words1 = s.split()
# words2 = s.split(' ', maxsplit=4)
# words3 = s.split(' ')
# print(words1)
# print(words2)
# print(words3)

'''Methods work only with strings, not with int'''
# print([1, 2].split()) # AttributeError: 'list' object has no attribute 'join'
# print([1, 2].join([3, 4, 5])) # AttributeError: 'list' object has no attribute 'join'

# print(['abc', '1234'].split())   # AttributeError: 'list' object has no attribute 'split'
# print([1, 2].join([3, 4, 5]))    # AttributeError: 'list' object has no attribute 'join'

# s = 'BEEGEEK'
# chars = list(s)
# print(chars)  # ['B', 'E', 'E', 'G', 'E', 'E', 'K']
# s = '**'.join(chars)
# print(s)      # B**E**E**G**E**E**K

'''
–ü–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫.'''
# s = input().split()
# print('\n'.join(s))

# Other solution
# s = input().split()
# print(*s, sep="\n")

# Other solution
# print('\n'.join(input().split()))

'''
–ò–Ω–∏—Ü–∏–∞–ª—ã
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ–ª–æ–≤–µ–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç.
–≤—ã–≤–æ–¥–∏—Ç –∏–Ω–∏—Ü–∏–∞–ª—ã —á–µ–ª–æ–≤–µ–∫–∞.'''
# words = input().split()
# print(words[0][0], words[1][0], words[2][0], sep='.', end='.')
# # or with for-loop
# for letter in words:
#     print(letter[0], end='.')
#
# # Other solution
# name = input().split()
# print(f'{name[0][0]}.{name[1][0]}.{name[2][0]}.')
#
# # Other solution
# [print(s[0], end='.') for s in input().split()]

'''
Windows OS
–í –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ Windows –ø–æ–ª–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –±—É–∫–≤—ã –¥–∏—Å–∫–∞, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ç–∞–≤–∏—Ç—Å—è –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏
—Å–∏–º–≤–æ–ª  "\",  –∑–∞—Ç–µ–º —á–µ—Ä–µ–∑ —Ç–∞–∫–æ–π –∂–µ —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ—á–∏—Å–ª—è—é—Ç—Å—è –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏ (–ø–∞–ø–∫–∏), –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ñ–∞–π–ª,
–≤ –∫–æ–Ω—Ü–µ –ø–∏—à–µ—Ç—Å—è –∏–º—è —Ñ–∞–π–ª–∞ (C:\Windows\System32\calc.exe).
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ Windows.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. —Ä–∞–∑–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º "\". –ö–∞–∂–¥—É—é —á–∞—Å—Ç—å –≤—ã–≤–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.'''
# s = input()
# print('\n'.join(s.split('\\')))
# # or
# print('\n'.join(input().split('\\')))
#
# # Other solution
# print(input().replace('\\', '\n'))
#
# # Other solution
# print(*(input().split(chr(92))), sep='\n')

'''
–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ip-–∞–¥—Ä–µ—Å
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è 4 —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–∫–æ–π.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ip-–∞–¥—Ä–µ—Å–æ–º.
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ ¬´–î–ê¬ª, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ip-–∞–¥—Ä–µ—Å–æ–º, –∏ ¬´–ù–ï–¢¬ª ‚Äî –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. ip-–∞–¥—Ä–µ—Å —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º, –µ—Å–ª–∏ –≤—Å–µ 4 —á–∏—Å–ª–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 255 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
'''
# ip_list = input().split(".")
# for i in ip_list:
#     if int(i) > 255 or int(i) < 0:
#         print("–ù–ï–¢")
#         break
# else:
#     print("–î–ê")

# Other solution
# ip = input().split('.')
# for i in ip:
#     if int(i) not in range(0, 256):
#         print('–ù–ï–¢')
#         break
# else:
#     print('–î–ê')

'''
–î–æ–±–∞–≤—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ç—Ä–æ–∫–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. –≤—Å—Ç–∞–≤–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–∞–∂–¥—ã–º —Å–∏–º–≤–æ–ª–æ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞.
'''
# This solution ok except divider in the end
# text, divider = input(), input()
# for i in text:
#     print(i, divider, sep="", end="")

# text, divider = input(), input()
# text_list = list()
# for i in text:
#     text_list.extend(i)
# print(divider.join(text_list)) or # print(*text_list, sep=divider)

# Other solution
# –§—É–Ω–∫—Ü–∏—é join() –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —Ä–∞–∑–±–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é.
# –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç—Ä–æ–∫—É, —Ç–æ –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞–∑–±–∏—Ç–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º.
# text, divider = input(), input()
# print(divider.join(text))

# Other solution
# print(*input(), sep=input())

'''
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –ø–∞—Ä
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞. –ò–∑ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ –ø–∞—Ä —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Ä–∞–≤–Ω—ã—Ö –¥—Ä—É–≥ –¥—Ä—É–≥—É.
–°—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ –ª—é–±—ã–µ –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞, —Ä–∞–≤–Ω—ã–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –æ–±—Ä–∞–∑—É—é—Ç –æ–¥–Ω—É –ø–∞—Ä—É, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å.
'''
# nums = input().split()
# counter = 0
#
# for i in range(len(nums)):
#     for j in range(i + 1, len(nums)):
#         if nums[i] == nums[j]:
#             counter += 1
# print(counter)

# Other solution
'''
–±–µ—Ä–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞. –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –∏—Å–∫–æ–º—ã—Ö –ø–∞—Ä –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å —ç—Ç–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º. –í—Å—Ç–∞—Ç—å —Å –Ω–∏–º –≤ –ø–∞—Ä—É –º–æ–∂–µ—Ç
—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, —Ä–∞–≤–Ω–æ–µ –µ–º—É. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–∫–∏—Ö —á–∏—Å–µ–ª —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–∞ count. –ù–æ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
–Ω–∞—à –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–∞—Ä—ã: –≤—Å—Ç–∞—Ç—å –≤ –ø–∞—Ä—É —Å–∞–º —Å —Å–æ–±–æ–π –æ–Ω –Ω–µ –º–æ–∂–µ—Ç, –ø–æ—ç—Ç–æ–º—É –≤—ã—á–∏—Ç–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É.
–ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–¥—Å—á–µ—Ç –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞.
–í –∫–æ–Ω—Ü–µ —É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è –ø–∞—Ä–∞ –ø–æ—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞–º–∏ –¥–≤–∞–∂–¥—ã.
'''
# nums = input().split()
# equal_pairs = 0
# for num in nums:
#     equal_pairs += nums.count(num) - 1
# print(equal_pairs // 2)

# for i in nums:
#     digits.append(int(i))
# print(digits)
# for j in digits:
#     print(digits.count(j) // 2)

'''
–í—Å–µ —Å—Ä–∞–∑—É 2 üå∂Ô∏è
–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω:
numbers = [8, 9, 10, 11]
–ó–∞–º–µ–Ω–∏–ª –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –Ω–∞ 17;
–î–æ–±–∞–≤–∏–ª —á–∏—Å–ª–∞ 4, 5 –∏ 6 –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞;
–£–¥–∞–ª–∏–ª –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞;
–£–¥–≤–æ–∏–ª —Å–ø–∏—Å–æ–∫;
–í—Å—Ç–∞–≤–∏–ª —á–∏—Å–ª–æ 25 –ø–æ –∏–Ω–¥–µ–∫—Å—É 3;
–í—ã–≤–µ–ª —Å–ø–∏—Å–æ–∫, —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ print()
'''
# numbers = [8, 9, 10, 11]
# numbers[1] = 17
# numbers.extend([4, 5, 6])
# numbers.pop(0)
# numbers *= 2
# numbers.insert(3, 25)
# print(numbers)

'''
del —É–¥–∞–ª—è–µ—Ç, —Ä–æ—Ä –≤—ã—Ä–µ–∑–∞–µ—Ç. –ü–æ–ø –Ω–∞–¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–¥–æ –∫—É–¥–∞-—Ç–æ –≤–æ–∑–≤—Ä–∞—â—è—Ç—å.
pop() –≤—ã—Ä–µ–∑–∞–µ—Ç –µ—Å–ª–∏ –≤—ã –∑–∞–¥–∞–¥–∏—Ç–µ —ç—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. x =[1,2,3] y = x.pop(0) print(y) >>>1 –≠—Ç–æ –ø–æ–ª–µ–∑–Ω–æ –≤ –∑–∞–¥–∞—á–∞—Ö,
–≥–¥–µ –Ω–∞–¥–æ –≤—ã—Ä–µ–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ. –ê –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π,
—Ç–æ —è –¥—É–º–∞—é —Ä–∞–∑–Ω–∏—Ü—ã —Å del –Ω–µ—Ç.
'''

'''
–ü–µ—Ä–µ—Å—Ç–∞–≤–∏—Ç—å min –∏ max
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–ò–∑ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π
—ç–ª–µ–º–µ–Ω—Ç —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å–ø–∏—Å–æ—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã.
'''
# numbers = input().split()
# for i in range(len(numbers)):
#     numbers[i] = int(numbers[i])
#
# min_number = min(numbers)
# min_number_index = numbers.index(min_number)
# max_number = max(numbers)
# max_number_index = numbers.index(max_number)
#
# numbers[max_number_index] = min_number
# numbers[min_number_index] = max_number
# print(*numbers)

# Other solution
# s = input().split()
# for i in range(len(s)):
#     s[i] = int(s[i])
# ind_max, ind_min = s.index(max(s)), s.index(min(s))
# s[ind_min], s[ind_max] = s[ind_max], s[ind_min]
# print(*s)

# Other solution
'''
–≤ —Ñ—É–Ω–∫—Ü–∏–∏ min –∏ max –º–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç key = int –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞:
'''
# s = input().split()
# s_min = min(s, key=int)
# s_max = max(s, key=int)
# i_min = s.index(s_min)
# i_max = s.index(s_max)
# s[i_max] = s_min
# s[i_min] = s_max
# print(*s)

'''
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏–∫–ª–µ–π
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç. –°–ª–æ–≤–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏–∫–ª–µ–π: 'a', 'an', 'the' –∏ –≤—ã–≤–æ–¥–∏—Ç –≤–º–µ—Å—Ç–µ —Å –ø–æ—è—Å–Ω—è—é—â–∏–º —Ç–µ–∫—Å—Ç–æ–º.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ê—Ä—Ç–∏–∫–ª–∏ –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã 'A', 'An', 'The'.
Text sample:
William Shakespeare was born in the town of Stratford, England, in the year 1564. When he was a young man, Shakespeare 
moved to the city of London, where he began writing plays. His plays were soon very successful, and were enjoyed both 
by the common people of London and also by the rich and famous. In addition to his plays, Shakespeare wrote many short 
poems and a few longer poems. Like his plays, these poems are still famous today.
'''
# text = input().lower().split()
# a_an_the = text.count('a') + text.count('the') + text.count('an')
# print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏–∫–ª–µ–π: {a_an_the}")
# or
# print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏–∫–ª–µ–π: {text.count('a') + text.count('the') + text.count('an')}")

'''
–í–∑–ª–æ–º –ë—Ä–∞—Ç—Å—Ç–≤–∞ –°—Ç–∞–ª–∏ üå∂Ô∏è
–ù–µ–º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤ –ø—É—Å—Ç–æ—à–∞—Ö –ú–æ—Ö–∞–≤–µ –ö—É—Ä—å–µ—Ä –∑–∞–±—Ä–µ–ª –≤ –•–∏–¥–¥–µ–Ω-–í—ç–ª–∏ ‚Äì —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –±—É–Ω–∫–µ—Ä –ë—Ä–∞—Ç—Å—Ç–≤–∞ –°—Ç–∞–ª–∏, –∏ –ª—é–±–µ–∑–Ω–æ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è
–ø–æ–º–æ—á—å –∏–º –≤ —Ä–µ—à–µ–Ω–∏–∏ –∏—Ö –ø—Ä–æ–±–ª–µ–º. –û–¥–Ω–æ–π –∏–∑ —Ç–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º —è–≤–ª—è–ª—Å—è —Å—Ç—Ä–∞–Ω–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π –≤–∏—Ä—É—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—è–≤–ª—è–ª—Å—è –≤ –≤–∏–¥–µ
–ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞—Ö –ë—Ä–∞—Ç—Å—Ç–≤–∞ –°—Ç–∞–ª–∏. –ò–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ë—Ä–∞—Ç—Å—Ç–≤–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ
–æ—Å—Ç–∞–≤–ª—è—é—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–¥—É, –∏ –ø–∏—à—É—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ Python, –ø–æ—ç—Ç–æ–º—É —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç—Ç–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–∏–∫–∞–∫ –Ω–µ –Ω–∞–≤—Ä–µ–¥–∏—Ç –∏–º.
–ü–æ–º–æ–≥–∏—Ç–µ –ø–∏—Å—Ü—É –ò–±—Å–µ–Ω—É —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∏—Ç—Å—è —Å–∏–º–≤–æ–ª —Ä–µ—à—ë—Ç–∫–∏ –∏ —Å—Ä–∞–∑—É –∂–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –Ω–µ —Å—á–∏—Ç–∞—è –ø–µ—Ä–≤–æ–π.
–î–∞–ª–µ–µ —Å–ª–µ–¥—É–µ—Ç n —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ –∂–µ —Å—Ç—Ä–æ–∫–∏, –Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Å–∏–º–≤–æ–ª—ã –ø—É—Å—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫.
–ü—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤–≤–æ–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–µ –Ω–∞–¥–æ.

Sample Input:
#12
print("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è")
name = input()
print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è")    # –∞—Ö–∞—Ö–∞—Ö–∞—Ö –≤–∞–º –Ω–µ –ø–æ–π–º–∞—Ç—å –º–µ–Ω—è
password = input()
if password == "hoover":
    print("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ä—ã—Ü–∞—Ä—å", name)         #–¥–æ–ª–æ–π –ú–∞–∫–Ω–∞–º–∞—Ä—É
elif password == "noncr":
    print("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø–∞–ª–∞–¥–∏–Ω", name)
elif password == "gelios":
    print("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Å—Ç–∞—Ä–µ–π—à–∏–Ω–∞", name)          #–≠–ª–∞–π–¥–∂–∞ –≤–ø–µ—Ä—ë–¥
else:
    print("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø–æ—Å–ª—É—à–Ω–∏–∫", name)

Sample Output:
print("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è")
name = input()
print("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –∏–º–µ–µ—Ç—Å—è")
password = input()
if password == "hoover":
    print("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Ä—ã—Ü–∞—Ä—å", name)
elif password == "noncr":
    print("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø–∞–ª–∞–¥–∏–Ω", name)
elif password == "gelios":
    print("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Å—Ç–∞—Ä–µ–π—à–∏–Ω–∞", name)
else:
    print("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø–æ—Å–ª—É—à–Ω–∏–∫", name)
'''
# n = input().split("#")
#
# for _ in range(int(n[1])):
#     s = input()
#     if "#" in s:
#         s = s[:s.index("#")]
#     print(s.rstrip())


'''
–î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∏—Å–µ–ª –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤
–æ—Ç 100 –¥–æ 1000.
'''
# p_list = [str(i) for i in range(100, 1001)]
# palindromes = [int(i) for i in p_list if i == i[::-1]]
# print(palindromes)

# Other solution
# p = [i for i in range(100, 1001) if str(i) == str(i)[::-1]]
# palindromes = [i for i in range(101, 1001) if i % 10 == i // 100]
# print(p)

'''
–°–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ 1
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç. —Å–æ–∑–¥–∞–µ—Ç
—Å–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–≤–∞–¥—Ä–∞—Ç—ã —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, —Ç–æ –µ—Å—Ç—å –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –î–ª—è –≤—ã–≤–æ–¥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª for.
'''
# lst = [i ** 2 for i in range(1, int(input()) + 1)]
# print(*lst, sep="\n")
# or
# print(*[i ** 2 for i in range(1, int(input()) + 1)], sep='\n')

'''
–°–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ 2
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–µ–¥–µ—Ç –∫—É–±—ã —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª —Ç–∞–∫–∂–µ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª—è –≤—ã–≤–æ–¥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏–∫–ª for.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ split().
'''
# print(*[int(i) ** 3 for i in input().split()])

'''
–í –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É 1
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å–ª–æ–≤–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫.
'''
# print(*[i for i in input().split()], sep="\n")
# or
# print(*input().split(),sep='\n')
# or
# print(input().replace(" ","\n"))
# or
# print("\n".join(input().split()))

'''
–í –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É 2
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
Sample Input 1:
–ß–∏—Å–ª–æ Pi –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω–æ 3.1415
Sample Output 1:
31415
'''
# print(*(i for i in input() if i.isdigit()), sep="")

'''
–í –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É 3
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–µ–¥–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç—ã —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª,
–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ —Ü–∏—Ñ—Ä—É 4.
'''
# for i in input().split():
#     if (int(i) ** 2) % 10 != 4 and int(i) % 2 == 0:
#         print(int(i) ** 2)

# print(*[(int(i) ** 2) for i in input().split() if (int(i) ** 2) % 10 != 4 and int(i) % 2 == 0])
# or
# —ç—Ç–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª, –∫–≤–∞–¥—Ä–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –æ–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ 4.
# –ï—Å–ª–∏ —á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 2 –∏–ª–∏ 8, —Ç–æ –µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç –æ–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 4
# print(*[int(i) ** 2 for i in input().split() if i[-1] in "046"])

# print(*dir(list()))

# a = [5, 1, 4, 2, 8]
# a = [17, 24, 91, 96, 67, -27, 79, -71, -71, 58, 48, 88, 88, -16, -78, 96, -76, 56, 92, 1, 32, -17, 36, 88, -61, -97,
#      -37, -84, 50, 47, 94, -6, 52, -76, 93, 14, -32, 98, -65, -16, -9, -68, -20, -40, -71, 93, -91, 44, 25, 79, 97, 0,
#      -94, 7, -47, -96, -55, -58, -78, -78, -79, 75, 44, -56, -41, 38, 16, 70, 17, -17, -24, -83, -74, -73, 11, -26, 63,
#      -75, -19, -13, -51, -74, 21, -8, 21, -68, -66, -84, -95, 78, 69, -29, 39, 38, -55, 7, -11, -26, -62, -84]
# n = len(a)
#
# for i in range(n - 1):
#     flag = True
#     for j in range(n - i - 1):
#         if a[j] > a[j + 1]:
#             a[j], a[j + 1] = a[j + 1], a[j]
#             flag = False
#     if flag:
#         break
#
# print(a)


'''
–û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–≤ –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤—ã–±–æ—Ä–æ–º.
'''
# a = [5, 1, 4, 2, 8, 3]
# n = len(a)
#
# for i in a[:n]:
#     max_val = max(a[:n])
#     max_val_idx = a.index(max_val)
#     a[max_val_idx], a[n-1] = a[n-1], a[max_val_idx]
#     n -= 1
# print(a)

# Other solution
# for i in range(n - 1):
#     i_max = a.index(max(a[:n - i]))
#     a[i_max], a[-i-1] = a[-i-1], a[i_max]
# print(a)


# print(*(letter[0] for letter in input().split()), sep='.', end=".")
# Example Input:
# –í–ª–∞–¥–∏–º–∏—Ä –°–µ–º–µ–Ω–æ–≤–∏—á –í—ã—Å–æ—Ü–∫–∏–π
# Example output:
# –í.–°.–í.


# Insertion sort
# a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
# n = len(a)
#
# for i in range(1, n):
#     elem = a[i]  # –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ —Å–ø–∏—Å–∫–∞
#     j = i
#     while j >= 1 and a[j - 1] > elem:
#         a[j] = a[j - 1]
#         j -= 1
#     a[j] = elem
#
# print('–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:', a)

'''–°–ø–∏—Å–æ–∫ —á–µ—Ç–Ω—ã—Ö'''
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ n, n‚â•2. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª
#  [2, 4, 6, ..., n].
# print([i for i in range(2, int(input()) + 1, 2)])

'''
–°—É–º–º–∞ –¥–≤—É—Ö —Å–ø–∏—Å–∫–æ–≤
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–ò–∑ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è —Å–ø–∏—Å–∫–∏ —á–∏—Å–µ–ª L –∏ M.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. —Å–æ–∑–¥–∞–µ—Ç —Ç—Ä–µ—Ç–∏–π —Å–ø–∏—Å–æ–∫, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è —Å—É–º–º—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
—Å–ø–∏—Å–∫–æ–≤ L –∏ M. –î–∞–ª–µ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ 1 –ø—Ä–æ–±–µ–ª.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –≤ –æ–±–µ–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ.
'''
# l, m = input().split(), input().split()
# n = []
# for i in range(len(l)):
#     n.append(int(l[i]) + int(m[i]))
# print(*n)

'''
–°—É–º–º–∞ —á–∏—Å–µ–ª
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. –≤—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–∂–¥—É –∫–∞–∂–¥—ã–º —á–∏—Å–ª–æ–º –∑–Ω–∞–∫ +, –∞ –∑–∞—Ç–µ–º –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ join() —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫.
'''
# lst = input().split()
#
# for i in range(len(lst)):
#     lst[i] = int(lst[i])
# print(*lst, sep='+', end='')
# print(f"={sum(lst)}")

# Other solution
# n = [int(i) for i in input().split()]
# print(*n, sep='+', end='=')
# print(sum(n))

'''
–í–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä üå∂Ô∏èüå∂Ô∏è
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º.
–°—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –µ—Å–ª–∏ –æ–Ω–∞ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç:
abc-def-hijk –∏–ª–∏
7-abc-def-hijk
–≥–¥–µ a, b, c, d, e, f, h, i, j, k ‚Äì —Ü–∏—Ñ—Ä—ã –æ—Ç 0 –¥–æ 9.

–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ ¬´YES¬ª –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∏ ¬´NO¬ª –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª -, –∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ –¥–æ–ª–∂–Ω—ã
–±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º.
'''
# s = input().split('-')
#
# if not ''.join(s).isdigit() or len(s) not in (3, 4):
#     print("NO")
# elif len(s) == 4 and not s[0] == '7':
#     print("NO")
# elif len(s) == 4 and len(s[1]) == 3 and len(s[2]) == 3 and len(s[3]) == 4:
#     print("YES")
# elif len(s) == 3 and len(s[0]) == 3 and len(s[1]) == 3 and len(s[2]) == 4:
#     print("YES")
# else:
#     print("NO")

# Other solution
# s1 = [i for i in input().split('-')]
# s2 = [len(i) for i in s1 if i.isdigit()]
# print('YES' if s2 == [1, 3, 3, 4] and s1[0] == '7' or s2 == [3, 3, 4] else 'NO')

# Other solution
# n = input().split("-")
# c = [len(i) for i in n]
# if c == [3, 3, 4] and ''.join(n).isdigit():
#     print("YES")
# elif c == [1, 3, 3, 4] and ''.join(n).isdigit() and n[0] == '7':
#     print("YES")
# else:
#     print("NO")

# Other solution
# n = input().split('-')
# if n[0] == '7':
#     del n[0]
# if [len(i) for i in n] == [3, 3, 4] and ''.join(n).isdigit():
#     print('YES')
# else:
#     print('NO')

# Other solution
# s = input()
# if s.startswith('7-'):
#     s = s[2:]
# print('YES' if s[3] == '-' and s[7] == '-' and s.replace('-', '').isdigit() and len(s) == 12 else 'NO')

'''
–°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç –¥–ª–∏–Ω—É —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞.
'''
# s = [len(i) for i in input().split()]
# print(max(s))

# Other solution
# print(max(len(i) for i in input().split()))

'''
–ú–æ–ª–æ–¥–µ–∂–Ω—ã–π –∂–∞—Ä–≥–æ–Ω
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤
"–º–æ–ª–æ–¥–µ–∂–Ω—ã–π –∂–∞—Ä–≥–æ–Ω" –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∞–≤–∏–ª—É: 
–ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ —É–¥–∞–ª—è–µ—Ç—Å—è –∏ —Å—Ç–∞–≤–∏—Ç—Å—è –≤ –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞; 
–∑–∞—Ç–µ–º –≤ –∫–æ–Ω–µ—Ü —Å–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≥ "–∫–∏".
'''

# s = []
# for i in input().split():
#     s.append(i[1:] + i[0] + '–∫–∏')
# print(*s)

# print(*[i[1:] + i[0] + '–∫–∏' for i in input().split()])

# n = int(input())  # Google search - 2
# lst = []
# zap = []
# for i in range(n):
#     lst.append(input())
# k = int(input())
# for j in range(k):
#     zap.append(input())
# for e in range(len(lst)):
#     for p in range(len(zap)):
#         count = 0
#         if zap in lst:
#             count += 1
#             if count == k:
#                 print(lst[e])
#
# print(count)
# print(lst)
# print(zap)


# n = int(input())  # Google search - 2
# lst = []
# zap = []
# for i in range(n):
#     lst.append(input().lower())
# k = int(input())
# for j in range(k):
#     zap.append(input())
# for e in range(len(lst)):
#     for p in range(len(zap)):
#         count = 0
#         if zap[p] in lst[e]:
#             count += 1
#             if count == k:
#                 print(lst[e])
#
# print(count)
# print(lst)
# print(zap)

import random

chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&*+-=?@^_()'
print(*[random.choice(chars) for _ in range(10)], sep="")
