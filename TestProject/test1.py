# eng_lower_abc = 'abcdefghijklmnopqrstuvwxyz'
# eng_upper_abc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
# ru_lower_abc = "–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
# ru_upper_abc = "–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"

# print(len(eng_lower_abc))
# print(chr(ord(eng_lower_abc[0])), ord(eng_lower_abc[0]))
# print(chr(ord(eng_lower_abc[10])), ord(eng_lower_abc[10]))
# print(eng_lower_abc[(eng_lower_abc.find('a') + 10) % 26])

# Encrypt_en
# str_to_encr, k = input(), int(input())
# n = len(eng_lower_abc)
# encrypted = ''

# for i in str_to_encr:
#     if i.isalpha():
#         if i.islower():
#             encrypted += eng_lower_abc[(eng_lower_abc.find(i) + k) % n]
#         if i.isupper():
#             encrypted += eng_upper_abc[(eng_upper_abc.find(i) + k) % n]
#     else:
#         encrypted += i


# Decrypt_en
# str_to_decr, k = input(), int(input())
# n = len(eng_lower_abc)
# encrypted = ''
# for i in str_to_decr:
#     if i.isalpha():
#         if i.islower():
#             encrypted += eng_lower_abc[(eng_lower_abc.find(i) - k) % n]
#         if i.isupper():
#             encrypted += eng_upper_abc[(eng_upper_abc.find(i) - k) % n]
#     else:
#         encrypted += i
#
# print(encrypted)

# Decrypt function for En
# Day, mice. "Year" is a mistake!

# Encrypt_ru
# encr_ru = input()
# k = int(input())
# n = len(ru_lower_abc)
# encrypted = ''
#
# for i in encr_ru:
#     if i.isalpha():
#         if i.islower():
#             encrypted += ru_lower_abc[(ru_lower_abc.find(i) + k) % n]
#         if i.isupper():
#             encrypted += ru_upper_abc[(ru_upper_abc.find(i) + k) % n]
#     else:
#         encrypted += i
#         continue


# Decrypt_ru
# decr_ru = input()
# k = int(input())
# n = len(ru_lower_abc)
# decrypted = ''
#
# for i in decr_ru:
#     if i.isalpha():
#         if i.islower():
#             decrypted += ru_lower_abc[(ru_lower_abc.find(i) - k) % n]
#         if i.isupper():
#             decrypted += ru_upper_abc[(ru_upper_abc.find(i) - k) % n]
#     else:
#         decrypted += i
#         continue
#
# print(decrypted)


'''
–ê–≤–µ, –¶–µ–∑–∞—Ä—å üå∂Ô∏è
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞.
–ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å—Ç—Ä–æ–∫–∏ —Å–ª–µ–¥—É–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è (—Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ —Å–¥–≤–∏–≥–∞ –Ω–∞ –¥–ª–∏–Ω—É —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞).
–°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã –ø—Ä–∏ —ç—Ç–æ–º –æ—Å—Ç–∞—é—Ç—Å—è —Å—Ç—Ä–æ—á–Ω—ã–º–∏, –∞ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ ‚Äì –ø—Ä–æ–ø–∏—Å–Ω—ã–º–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –°–∏–º–≤–æ–ª—ã, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏, –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è.

–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
Sample Input 1: Day, mice. "Year" is a mistake!
Sample Output 1: Gdb, qmgi. "Ciev" ku b tpzahrl!
Sample Input 2: my name is Python!
Sample Output 2: oa reqi ku Veznut!
'''
# eng_lower_abc = 'abcdefghijklmnopqrstuvwxyz'
# eng_upper_abc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
#
# str_to_encr = input().split()
# n = len(eng_lower_abc)
# encrypted = ''
#
# for i in str_to_encr:
#     count = 0
#     for j in i:
#         if j.isalpha():
#             count += 1
#
#     for k in i:
#         if k.isalpha():
#             if k.islower():
#                 encrypted += eng_lower_abc[(eng_lower_abc.find(k) + count) % n]
#             if k.isupper():
#                 encrypted += eng_upper_abc[(eng_upper_abc.find(k) + count) % n]
#         else:
#             encrypted += k
#     encrypted += " "
# print(encrypted)

# Other solution
# abc = 'abcdefghijklmnopqrstuvwxyz'
# ABC = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
# s = input().split()
# string = ''
#
# for e in s:
#     step = len([i for i in e if i.isalpha()])
#     for c in e:
#         if c in abc:
#             string += abc[(abc.find(c) + step) % 26]
#         elif c in ABC:
#             string += ABC[(ABC.find(c) + step) % 26]
#         else:
#             string += c
#     string += ' '
#
# print(string[:-1])


# Transform binary number and others to 10-base system numbers
'''
https://stepik.org/lesson/349851/step/9?unit=333706 Theory on bin, oct, hex
'''
# print(int('111111', base=2))
# print(int('2AF', base=16))
# print(int('1AF2', base=16))
# print(0x1AF2)
# print(bin(513))
#
# print(bin(10))  # 0b1010 –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ 0b —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ —Ç–æ–º, —á—Ç–æ —á–∏—Å–ª–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –¥–≤–æ–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è
# print(oct(150))  # 0o226 –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ 0o —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ —Ç–æ–º, —á—Ç–æ —á–∏—Å–ª–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –≤–æ—Å—å–º–µ—Ä–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è
# print(hex(18765))  # 0x494d –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ 0x —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ —Ç–æ–º, —á—Ç–æ —á–∏—Å–ª–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è

'''
–ü—Ä–∏–º–µ—á–∞–Ω–∏—è
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ï—Å–ª–∏ –Ω–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –ø—Ä–∏—Å—Ç–∞–≤–æ–∫ 0b, 0o, 0x, —Ç–æ –º—ã –º–æ–∂–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ç—Ä–æ–∫–æ–≤—ã–º —Å—Ä–µ–∑–æ–º:

num = 127

bin_num = bin(num)  # 0b1111111
oct_num = oct(num)  # 0o177
hex_num = hex(num)  # 0x7f

print(bin_num[2:])  # 1111111
print(oct_num[2:])  # 177
print(hex_num[2:])  # 7f
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è hex() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–µ —á–∏—Å–ª–æ —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
a, b, c, d, e, f. –î–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–æ–≤—ã–π –º–µ—Ç–æ–¥ upper():

num = 127432

hex_num = hex(num)          # 0x1f1c8
print(hex_num[2:].upper())  # 1F1C8
'''


'''
BOH
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å—á–∏—Å–ª–µ–Ω–∏—è.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –µ–≥–æ –≤ –¥–≤–æ–∏—á–Ω—É—é, –≤–æ—Å—å–º–µ—Ä–∏—á–Ω—É—é –∏ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ bin(), oct(), hex().
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –î–ª—è —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å—á–∏—Å–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã A, B, C, D, E, F.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. BOH = Binary, Octal, Hex.
'''
# def bon(number):
#     bin_num = bin(number)
#     oct_num = oct(number)
#     hex_num = hex(number)
#     return bin_num[2:], oct_num[2:], hex_num[2:].upper()
#
#
# n = int(input())
# print(*bon(n), sep="\n")


'''
–£–≥–∞–¥–∞–π–∫–∞ —Å–ª–æ–≤
–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –µ–≥–æ —É–≥–∞–¥–∞—Ç—å. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—Å–µ –±—É–∫–≤—ã —Å–ª–æ–≤–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã.
–¢–∞–∫–∂–µ —Ä–∏—Å—É–µ—Ç—Å—è –≤–∏—Å–µ–ª–∏—Ü–∞ —Å –ø–µ—Ç–ª–µ–π. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±—É–∫–≤—É, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ —Å–ª–æ–≤–æ.
–ï—Å–ª–∏ —Ç–∞–∫–∞—è –±—É–∫–≤–∞ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ, —Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å—Ç–∞–≤–∏—Ç –±—É–∫–≤—É —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ –æ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Å–ª–æ–≤–µ.
–ï—Å–ª–∏ —Ç–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç, –∫ –≤–∏—Å–µ–ª–∏—Ü–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫—Ä—É–≥ –≤ –ø–µ—Ç–ª–µ, –∏–∑–æ–±—Ä–∞–∂–∞—é—â–∏–π –≥–æ–ª–æ–≤—É.
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ—Ç–≥–∞–¥—ã–≤–∞—Ç—å –±—É–∫–≤—ã –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –æ—Ç–≥–∞–¥–∞–µ—Ç –≤—Å—ë —Å–ª–æ–≤–æ.
–ó–∞ –∫–∞–∂–¥—É—é –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –µ—â–µ –æ–¥–Ω–∞ —á–∞—Å—Ç—å —Ç—É–ª–æ–≤–∏—â–∞ –≤–∏—Å–µ–ª—å–Ω–∏–∫–∞ (–æ–±—ã—á–Ω–æ –∏—Ö 6: –≥–æ–ª–æ–≤–∞, —Ç—É–ª–æ–≤–∏—â–µ, 2 —Ä—É–∫–∏, 2 –Ω–æ–≥–∏)

–°–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:
–¶–µ–ª—ã–µ —á–∏—Å–ª–∞ (—Ç–∏–ø int);
–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ;
–í–≤–æ–¥ / –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö (—Ñ—É–Ω–∫—Ü–∏–∏ input() –∏ print());
–£—Å–ª–æ–≤–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä (if/elif/else);
–¶–∏–∫–ª while;
–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª;
–û–ø–µ—Ä–∞—Ç–æ—Ä—ã break, continue;
–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π;
–°–ø–∏—Å–æ—á–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è;
–†–∞–±–æ—Ç–∞ —Å –º–æ–¥—É–ª–µ–º random –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª.
'''
from random import choice
from time import sleep
word_list = ['—Å–µ—Ä–¥—Ü–µ', '–¥–≤–∏–∂–µ–Ω–∏–µ', '–º–∞—Ç–µ—Ä–∏–∞–ª', '–Ω–µ–¥–µ–ª—è', '—á—É–≤—Å—Ç–≤–æ', '–≥–∞–∑–µ—Ç–∞',
        '–ø—Ä–∏—á–∏–Ω–∞', '–æ—Å–Ω–æ–≤–∞', '—Ç–æ–≤–∞—Ä–∏—â', '–∫—É–ª—å—Ç—É—Ä–∞', '–¥–∞–Ω–Ω—ã–µ', '–º–Ω–µ–Ω–∏–µ', '–¥–æ–∫—É–º–µ–Ω—Ç',
        '–∏–Ω—Å—Ç–∏—Ç—É—Ç', '–ø—Ä–æ–µ–∫—Ç', '–≤—Å—Ç—Ä–µ—á–∞', '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '—Å–ª—É–∂–±–∞', '—Å—É–¥—å–±–∞', '–¥–µ–≤—É—à–∫–∞',
        '–æ—á–µ—Ä–µ–¥—å', '—Å–æ—Å—Ç–∞–≤', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '—Å–æ–±—ã—Ç–∏–µ', '–æ–±—ä–µ–∫—Ç', '—Å–æ–∑–¥–∞–Ω–∏–µ', '–∑–Ω–∞—á–µ–Ω–∏–µ',
        '–ø–µ—Ä–∏–æ–¥', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '–ø—Ä–∏–º–µ—Ä', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω',
        '–Ω–∞—á–∞–ª—å–Ω–∏–∫', '–ø—Ä–∏–Ω—Ü–∏–ø', '–≤–æ–∑–¥—É—Ö', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä', '–±–æ—Ä—å–±–∞', '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ',
        '—Ä–∞–∑–º–µ—Ä', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–º–∞–ª—å—á–∏–∫', '–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å', '—É—á–∞—Å—Ç–∏–µ', '–¥–µ–≤–æ—á–∫–∞',
        '–ø–æ–ª–∏—Ç–∏–∫–∞', '–∫–∞—Ä—Ç–∏–Ω–∞', '–¥–æ–ª–ª–∞—Ä', '—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è', '–∏–∑–º–µ–Ω–µ–Ω–∏–µ', '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
        '—Ä–∏—Å—É–Ω–æ–∫']


def get_word():
    return choice(word_list).upper()


# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
def display_hangman(tries):
    stages = [  # —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –≥–æ–ª–æ–≤–∞, —Ç–æ—Ä—Å, –æ–±–µ —Ä—É–∫–∏, –æ–±–µ –Ω–æ–≥–∏
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / \\
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞, —Ç–æ—Ä—Å, –æ–±–µ —Ä—É–∫–∏, –æ–¥–Ω–∞ –Ω–æ–≥–∞
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / 
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞, —Ç–æ—Ä—Å, –æ–±–µ —Ä—É–∫–∏
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |      
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞, —Ç–æ—Ä—Å –∏ –æ–¥–Ω–∞ —Ä—É–∫–∞
                '''
                   --------
                   |      |
                   |      O
                   |     \\|
                   |      |
                   |     
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞ –∏ —Ç–æ—Ä—Å
                '''
                   --------
                   |      |
                   |      O
                   |      |
                   |      |
                   |     
                   -
                ''',
                # –≥–æ–ª–æ–≤–∞
                '''
                   --------
                   |      |
                   |      O
                   |    
                   |      
                   |     
                   -
                ''',
                # –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                '''
                   --------
                   |      |
                   |      
                   |    
                   |      
                   |     
                   -
                '''
    ]
    return stages[tries]


def again():
    answer = input('–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞? –¥/–î –∏–ª–∏ –Ω/–ù\n').lower()
    if answer == '–¥':
        return play(get_word())
    elif answer == '–Ω':
        return print('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!')


def play(word):
    word_completion = '_' * len(word)
    guessed = False
    guessed_letters = []
    guessed_words = []
    tries = 6
    wait = 0.5

    print('–î–∞–≤–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ —É–≥–∞–¥–∞–π–∫—É —Å–ª–æ–≤!')
    sleep(wait)
    print('–£ –≤–∞—Å 6 –ø–æ–ø—ã—Ç–æ–∫ –∏ –≤–∏—Å–µ–ª–∏—Ü–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞\n', display_hangman(tries))
    sleep(wait)
    print(f'–°–ª–æ–≤–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {len(word)} –±—É–∫–≤: {word_completion}')
    sleep(wait)

    while not guessed and tries != 0:
        a = input('–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –∏–ª–∏ —Å–ª–æ–≤–æ —Ü–µ–ª–∏–∫–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º: ').upper()
        sleep(wait)
        while not a.isalpha():
            print('--–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª/-–ª—ã –∏–ª–∏ –¥—Ä—É–≥–æ–π —è–∑—ã–∫--')
            sleep(wait)
            a = input('–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –∏–ª–∏ —Å–ª–æ–≤–æ —Ü–µ–ª–∏–∫–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º: ').upper()

        while word_completion != word:
            if len(a) == 1:
                if a in guessed_letters:
                    print(f'–≠—Ç—É –±—É–∫–≤—É –≤—ã —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏: {guessed_letters}.\n–û—Å—Ç–∞–ª–æ—Å—å {tries} –ø–æ–ø—ã—Ç–æ–∫.\n{word_completion}')
                    break
                elif a in word and a not in word_completion:
                    for i in range(len(word)):
                        if word[i] == a:
                            word_completion = word_completion[:i] + a + word_completion[i + 1:]
                    guessed_letters.append(a)
                    print(f'–í—ã —É–≥–∞–¥–∞–ª–∏. –≠—Ç–∞ –±—É–∫–≤–∞ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ:\n{word_completion}.\n–û—Å—Ç–∞–ª–æ—Å—å {tries} –ø–æ–ø—ã—Ç–æ–∫.'
                          f'\n–ù–∞–∑–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: {guessed_letters}')
                    if word_completion == word:
                        guessed = True
                        break
                    break
                elif a not in word:
                    print('–¢–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ.')
                    guessed_letters.append(a)
                    tries -= 1
                    print(display_hangman(tries), f'\n–û—Å—Ç–∞–ª–æ—Å—å {tries} –ø–æ–ø—ã—Ç–æ–∫.\n{word_completion}'
                                                  f'\n–ù–∞–∑–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: {guessed_letters}')
                    break
            elif len(a) > 1:
                if a != word:
                    guessed_words.append(a)
                    tries -= 1
                    print(f'–≠—Ç–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ..\n–û—Å—Ç–∞–ª–æ—Å—å {tries} –ø–æ–ø—ã—Ç–æ–∫.\n{word_completion}'
                          f'\n–ù–∞–∑–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: {guessed_letters}')
                    print(display_hangman(tries))
                    break
                elif a in guessed_words:
                    print(f'–≠—Ç–æ —Å–ª–æ–≤–æ –≤—ã —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏: {guessed_words}.\n–û—Å—Ç–∞–ª–æ—Å—å {tries} –ø–æ–ø—ã—Ç–æ–∫.\n{word_completion}')
                    break
                else:
                    guessed = True
                    break

    if tries == 0:
        print(display_hangman(tries))
        print(f'–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ :(\n–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ - {word}')
        sleep(wait)
        again()

    if guessed:
        print(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!\n–£–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ - {word}.')
        sleep(wait)
        again()


# play(get_word())


# guessed = False
# tries = 5
# while not guessed and tries != 0:
#     a = int(input())
#     tries = 5
#     if a > 5:
#         print('Still False')
#     elif a == 5:
#         tries -= 5
#     else:
#         print('Guessed is True')
#         guessed = True
# print('Finish')


# word = 'abcabca'
# w_compl = '_______'
# while word != w_compl:
#     a = input('Give letter: ')
#     if a in word and a not in w_compl:
#         # while word.count(a) != w_compl.count(a):
#         for i in range(len(word)):
#             if word[i] == a:
#                 w_compl = w_compl[:i] + a + w_compl[i + 1:]
#         print(w_compl, word)

'''
–ó–∞–¥–∞—á–∞ 01 –∏–∑ ITEA.
Lesson 1, video 02:49:08

–ö–æ–ø–µ–π–∫–∏
–ù–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞–µ—Ç—Å—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 99.
–ù–∞–¥–æ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ:
1 - –∫–æ–ø–µ–π–∫–∞
2, 3, 4 - –∫–æ–ø–µ–π–∫–∏
5, 6, 7, 8, 9, 0 ... 11, 12, 13 ... 20, 30, 40 ... 90 - –∫–æ–ø–µ–µ–∫
–ù–∞–ø—Ä–∏–º–µ—Ä:
–£ –≤–∞—Å 1 –∫–æ–ø–µ–π–∫–∞.
–£ –≤–∞—Å 2 –∫–æ–ø–µ–π–∫–∏.
–£ –≤–∞—Å 5 –∫–æ–ø–µ–µ–∫.
–£ –≤–∞—Å 11 –∫–æ–ø–µ–µ–∫.
–£ –≤–∞—Å 31 –∫–æ–ø–µ–π–∫–∞.
–£ –≤–∞—Å 55 –∫–æ–ø–µ–µ–∫.
'''
# n = int(input("How many coins do you have?\n"))
# ka, jki, eek = '–∫–æ–ø–µ–π–∫–∞', '–∫–æ–ø–µ–π–∫–∏', '–∫–æ–ø–µ–µ–∫'
# if 5 <= n <= 20:
#     print(f'–£ –≤–∞—Å {n} {eek}.')
# elif n % 10 == 1:
#     print(f'–£ –≤–∞—Å {n} {ka}.')
# elif 2 <= n % 10 <= 4:
#     print(f'–£ –≤–∞—Å {n} {jki}.')
# else:
#     print(f'–£ –≤–∞—Å {n} {eek}.')

# With 3 conditions
# coins = int(input())
# if 4 < coins < 21 or 4 < coins % 10 < 10 or coins % 10 == 0:
#     print(coins, '–∫–æ–ø–µ–µ–∫')
# elif coins % 10 == 1:
#     print(coins, '–∫–æ–ø–µ–π–∫–∞')
# elif 1 < coins % 10 < 5:
#     print(coins, '–∫–æ–ø–µ–π–∫–∏')

# for i in range(1, 100):
#     ka, jki, eek = '–∫–æ–ø–µ–π–∫–∞', '–∫–æ–ø–µ–π–∫–∏', '–∫–æ–ø–µ–µ–∫'
#     if 5 <= i <= 20:
#         print(f'–£ –≤–∞—Å {i} {eek}.')
#     elif i % 10 == 1:
#         print(f'–£ –≤–∞—Å {i} {ka}.')
#     elif 2 <= i % 10 <= 4:
#         print(f'–£ –≤–∞—Å {i} {jki}.')
#     else:
#         print(f'–£ –≤–∞—Å {i} {eek}.')


'''
–ó–∞–¥–∞—á–∞ –∏–∑ ITEA.
Lesson 1, video 02:53:04

–ì—Ä–∏–≤–Ω—ã –∏ –∫–æ–ø–µ–π–∫–∏
–ù–∞ –≤—Ö–æ–¥ –ø–æ–¥–∞–µ—Ç—Å—è –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞: –≥—Ä–∏–≤–Ω—ã (–æ—Ç 1 –¥–æ 999) –∏ –∫–æ–ø–µ–π–∫–∏ (–æ—Ç 0 –¥–æ 99).
–í—ã–≤–µ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ.
–ü—Ä–∏–º–µ—Ä:
1, 85 - 1 –≥—Ä–∏–≤–Ω–∞ 85 –∫–æ–ø–µ–µ–∫ –∏–ª–∏ 1 –≥—Ä–∏–≤–Ω–∞, 85 –∫–æ–ø–µ–µ–∫
568, 20 - 568 –≥—Ä–∏–≤–µ–Ω 20 –∫–æ–ø–µ–µ–∫
0, 24 - 24 –∫–æ–ø–µ–π–∫–∏
173, 0 - 173 –≥—Ä–∏–≤–Ω—ã
0, 0 - –£ –≤–∞—Å –Ω–µ—Ç –¥–µ–Ω–µ–≥ :(
'''
def coins(coins):
    ka, jki, eek = '–∫–æ–ø–µ–π–∫–∞', '–∫–æ–ø–µ–π–∫–∏', '–∫–æ–ø–µ–µ–∫'
    if 4 < coins < 21 or 4 < coins % 10 < 10 or coins % 10 == 0:
        print(coins, eek)
    elif coins % 10 == 1:
        print(coins, ka)
    elif 1 < coins % 10 < 5:
        print(coins, jki)


def hryvnya(hrn):
    na, ny, ven = '–≥—Ä–∏–≤–Ω–∞', '–≥—Ä–∏–≤–Ω—ã', '–≥—Ä–∏–≤–µ–Ω'
    if 4 < hrn < 21 or 4 < hrn % 10 < 10 or hrn % 10 == 0:
        print(hrn, ven, end=', ')
    elif hrn % 10 == 1:
        print(hrn, na, end=', ')
    elif 1 < hrn % 10 < 5:
        print(hrn, ny, end=', ')


hr, kop = int(input()), int(input())
if hr > 0 and kop > 0:
    hryvnya(hr), coins(kop)
elif hr > 0 and kop < 1:
    hryvnya(hr)
    # if 4 < hr < 21 or 4 < hr % 10 < 10 or hr % 10 == 0:
    #     print(hr, ven)
    # elif hr % 10 == 1:
    #     print(hr, na)
    # elif 1 < hr % 10 < 5:
    #     print(hr, ny)
elif hr < 1 and kop > 0:
    coins(kop)
    # if 4 < coins < 21 or 4 < coins % 10 < 10 or coins % 10 == 0:
    #     print(coins, eek)
    # elif coins % 10 == 1:
    #     print(coins, ka)
    # elif 1 < coins % 10 < 5:
    #     print(coins, jki)
else:
    print('–£ –≤–∞—Å –Ω–µ—Ç –¥–µ–Ω–µ–≥ :(')
