'''
–ù–∞ easy
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ a –∏ b (b != 0), –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç:

—Å—É–º–º—É —á–∏—Å–µ–ª a –∏ b;
—Ä–∞–∑–Ω–æ—Å—Ç—å —á–∏—Å–µ–ª a –∏ b;
–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª a –∏ b;
—á–∞—Å—Ç–Ω–æ–µ —á–∏—Å–µ–ª a –∏ b;
—Ü–µ–ª—É—é —á–∞—Å—Ç—å –æ—Ç –¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–∞ a –Ω–∞ b;
–æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è —á–∏—Å–ª–∞ a –Ω–∞ b;
–∫–æ—Ä–µ–Ω—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∏–∑ —Å—É–º–º—ã –∏—Ö 10-—Ö —Å—Ç–µ–ø–µ–Ω–µ–π: sqrt{a^{10} + b^{10}}
'''
# a, b = int(input()), int(input())
# print(f'{a + b}\n{a - b}\n{a * b}\n{a / b:.3f}\n{a // b}\n{a % b}\n{(a ** 10 + b ** 10) ** 0.5}')


'''
–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ (in eng: BMI (body mass index))
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏ –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢) —á–µ–ª–æ–≤–µ–∫–∞.
–ò–ú–¢ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Å–∏—Ç —á–µ–ª–æ–≤–µ–∫ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ –Ω–æ—Ä–º—ã –¥–ª—è —Å–≤–æ–µ–≥–æ —Ä–æ—Å—Ç–∞. –ò–ú–¢ —á–µ–ª–æ–≤–µ–∫–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ:

–ò–ú–¢ = –º–∞—Å—Å–∞ (–∫–≥) / —Ä–æ—Å—Ç(–º) * —Ä–æ—Å—Ç(–º), –≥–¥–µ –º–∞—Å—Å–∞ –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ –∫–≥, –∞ —Ä–æ—Å—Ç ‚Äî –≤ –º.

–ú–∞—Å—Å–∞ —á–µ–ª–æ–≤–µ–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π, –µ—Å–ª–∏ –µ–≥–æ –ò–ú–¢ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É 18.5 –∏ 25.
–ï—Å–ª–∏ –ò–ú–¢ –º–µ–Ω—å—à–µ 18.5, —Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –≤–µ—Å–∏—Ç –Ω–∏–∂–µ –Ω–æ—Ä–º—ã.
–ï—Å–ª–∏ –ò–ú–¢ –±–æ–ª—å—à–µ 25, —Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ –Ω–æ—Ä–º—ã.

–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞", –µ—Å–ª–∏ –ò–ú–¢ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É 18.5 –∏ 25 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).
"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞", –µ—Å–ª–∏ –ò–ú–¢ –º–µ–Ω—å—à–µ 18.5 –∏ "–ò–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞", –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ò–ú–¢ –±–æ–ª—å—à–µ 25.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –¥–≤–∞ —á–∏—Å–ª–∞: –º–∞—Å—Å–∞ –∏ —Ä–æ—Å—Ç —á–µ–ª–æ–≤–µ–∫–∞, –∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
–í—Å–µ –≤—Ö–æ–¥–Ω—ã–µ —á–∏—Å–ª–∞ —è–≤–ª—è—é—Ç—Å—è –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –Ω–∏—Ö —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö float.
'''
# weight, height = float(input()), float(input())
# index = weight / height ** 2
# if index < 18.5:
#     print('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞')
# elif 18.5 <= index <= 25:
#     print('–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞')
# else:
#     print('–ò–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞')

# for i in range(60, 92):
#     height = 1.81
#     index = i / height ** 2
#     if index < 18.5:
#         print(i, '–∫–≥', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞')
#     elif 18.5 <= index <= 25:
#         print(i, '–∫–≥', '–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –º–∞—Å—Å–∞')
#     else:
#         print(i, '–∫–≥', '–ò–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞')

'''
–°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏
–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏, –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –æ–¥–∏–Ω –ª—é–±–æ–π —Å–∏–º–≤–æ–ª
(–≤ —Ç–æ–º —á–∏—Å–ª–µ –ø—Ä–æ–±–µ–ª) —Å—Ç–æ–∏—Ç 60 –∫–æ–ø–µ–µ–∫. –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ –≤ —Ä—É–±–ª—è—Ö –∏ –∫–æ–ø–µ–π–∫–∞—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.
'''
# text = input()
# price = 60 * len(text)
# rub = price // 100
# kop = price % 100
# # print(f'{kop:.2f}')
# print(f'{rub} —Ä. {kop} –∫–æ–ø.')


'''
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Å–ª–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç. –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ö—Ä–æ–º–µ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –º–æ–≥—É—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã (–æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ).
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É –∫–æ–¥–∞
'''
# print(len(input().split()))


'''
–ó–æ–¥–∏–∞–∫
–ö–∏—Ç–∞–π—Å–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∂–∏–≤–æ—Ç–Ω—ã–º –≥–æ–¥—ã –≤ 12-–ª–µ—Ç–Ω–µ–º —Ü–∏–∫–ª–µ.
–û–¥–∏–Ω 12-–ª–µ—Ç–Ω–∏–π —Ü–∏–∫–ª –ø–æ–∫–∞–∑–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–∏–∂–µ. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, 2012 –≥–æ–¥ –±—É–¥–µ—Ç –æ—á–µ—Ä–µ–¥–Ω—ã–º –≥–æ–¥–æ–º –¥—Ä–∞–∫–æ–Ω–∞.

–ì–æ–¥	–ñ–∏–≤–æ—Ç–Ω–æ–µ
2000	–î—Ä–∞–∫–æ–Ω
2001	–ó–º–µ—è
2002	–õ–æ—à–∞–¥—å
2003	–û–≤—Ü–∞
2004	–û–±–µ–∑—å—è–Ω–∞
2005	–ü–µ—Ç—É—Ö
2006	–°–æ–±–∞–∫–∞
2007	–°–≤–∏–Ω—å—è
2008	–ö—Ä—ã—Å–∞
2009	–ë—ã–∫
2010	–¢–∏–≥—Ä
2011	–ó–∞—è—Ü
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –≥–æ–¥ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –Ω–∏–º –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.
–í–∞—à–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±—ã–º –≥–æ–¥–æ–º, –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–º–∏, —á—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ.
'''
# zodiak = ['–û–±–µ–∑—å—è–Ω–∞', '–ü–µ—Ç—É—Ö', '–°–æ–±–∞–∫–∞', '–°–≤–∏–Ω—å—è', '–ö—Ä—ã—Å–∞', '–ë—ã–∫', '–¢–∏–≥—Ä', '–ó–∞—è—Ü', '–î—Ä–∞–∫–æ–Ω', '–ó–º–µ—è', '–õ–æ—à–∞–¥—å', '–û–≤—Ü–∞']
# year = int(input())
# print(zodiak[year % 12])


'''
–ü–µ—Ä–µ–≤–æ—Ä–æ—Ç —á–∏—Å–ª–∞
–î–∞–Ω–æ –ø—è—Ç–∏–∑–Ω–∞—á–Ω–æ–µ –∏–ª–∏ —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω–æ–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω–∏—Ç –ø–æ—Ä—è–¥–æ–∫ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—è—Ç–∏ —Ü–∏—Ñ—Ä –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π. –ß–∏—Å–ª–æ –Ω—É–∂–Ω–æ –≤—ã–≤–æ–¥–∏—Ç—å –±–µ–∑ –Ω–µ–∑–Ω–∞—á–∞—â–∏—Ö –Ω—É–ª–µ–π.

Exampes:
560000 -> 500006
25000 -> 52
12345 -> 54321
'''
# num = int(input())
# if len(str(num)) == 6:
#     reverse = ''
#     n = str(num // 100000)
# else:
#     reverse = ''
#     n = ''
# for i in range(5):
#     digit = num % 10
#     reverse += str(digit)
#     num //= 10
# print((n + reverse).lstrip('0'))

# My other solution
# num = int(input())
# digit = str(num // 100000)
# num = str(num)
# if len(num) == 5:
#     print(int(num[::-1]))
# else:
#     print(int(digit + num[-1:-6:-1]))

# Other solution
# s = input()
# print(int(s[:-5] + s[:-6:-1]))

# Other solution
# s = input()
# print(int(s[:-5] + s[-5:][::-1])) # –∑–∞–ø–∏—Å—å s[-5::-1] –æ–∑–Ω–∞—á–∞–µ—Ç: —Å–¥–µ–ª–∞–π —Å—Ä–µ–∑, –Ω–∞—á–∏–Ω–∞—è —Å -5 —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–≤–∏–≥–∞—è—Å—å
# –≤ —Å—Ç–æ—Ä–æ–Ω—É –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏ –¥–≤–∏–≥–∞—è—Å—å –∫ –Ω–∞—á–∞–ª—É.
# –ê s[-5:][::-1] —Å–Ω–∞—á–∞–ª–∞ –±–µ—Ä–µ—Ç —Å—Ä–µ–∑ –æ—Ç -5 –ø–æ –∫–æ–Ω–µ—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –∞ —É–∂–µ –ø–æ—Ç–æ–º –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

# slices with negative indexing. revert last 10 symbols
# str_exmpl = 'believe%in*beauty&of_dreams'
# str_new = str_exmpl[:-10]  # believe%in*beauty
# revert = str_exmpl[:-11:-1]
# print(str_new, revert)
# print(str_new + revert)

'''
Standard American Convention
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—ë—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—Å—Ç–∞–≤–ª—è–µ—Ç –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞–ø—è—Ç—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º
–æ –∑–∞–ø—è—Ç—ã—Ö –≤ –±–æ–ª—å—à–∏—Ö —á–∏—Å–ª–∞—Ö. 1000000 -> 1,000,000  12345 -> 12,345  100 -> 100
'''
# n = int(input())
# print(f'{n:,}')

# Other solution
# s = input()
# n = []
#
# while len(s) > 0:
#     n.append(s[-3:])
#     s = s[:-3]
#
# new_n = n[:: -1]
# print(*new_n, sep=',')

# Other solution
# num = input()
# print(len(num))
# for idx in range(len(num) - 3, 0, -3):
#     print(len(num) - 3)
#     num = num[:idx] + ',' + num[idx:]
# print(num)

'''
–ó–∞–¥–∞—á–∞ –ò–æ—Å–∏—Ñ–∞ –§–ª–∞–≤–∏—è üå∂Ô∏èüå∂Ô∏è
n —á–µ–ª–æ–≤–µ–∫, –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∏—Å–ª–∞–º–∏ –æ—Ç 1 –¥–æ n, —Å—Ç–æ—è—Ç –≤ –∫—Ä—É–≥—É.
–û–Ω–∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è, –∫–∞–∂–¥—ã–π k-–π –ø–æ —Å—á–µ—Ç—É —á–µ–ª–æ–≤–µ–∫ –≤—ã–±—ã–≤–∞–µ—Ç –∏–∑ –∫—Ä—É–≥–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å—á–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ
–∑–∞ –Ω–∏–º —á–µ–ª–æ–≤–µ–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –∫—Ä—É–≥—É –ø–æ—Å–ª–µ–¥–Ω–∏–º.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–∞–±–æ—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–∞ . https://www.youtube.com/watch?v=uCsD3ZGzMgE&t=11s
'''
# n, k = int(input()), int(input())

# from math import log2, ceil, floor
# Solution if k = 2
# def greater_number_pow_of_two(x):
#     if x % 2 != 0:
#         x -= 1
#
#     while ceil(log2(x)) != floor(log2(x)):
#         x -= 2
#     return x
#
#
# x = int(input())
# y = greater_number_pow_of_two(x)
#
# # last_one formula: last_alive = 2 * l + 1
# last_one = (x - y) * 2 + 1
# print(last_one)

# Recursion
# def josefus(n, k):
#     if n == 1:
#         return 1
#     else:
#         survivor = (josefus(n - 1, k) + k - 1) % n + 1
#         return survivor
#
#
# num, step = int(input()), int(input())
# print(josefus(num, step))

# ppl = [i for i in range(1, 51)]
# print(ppl)
# # ppl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
# k = 2
# i = k
# # length = len(ppl)
# while len(ppl) > 1:
#     print(ppl.pop(i))  # kill prisoner at i
#     i = (i + k) % len(ppl)
# print('Survivor: ', ppl[0])

# n, k = int(input()), int(input())
# lst = [i for i in range(1, n + 1)]
# while len(lst) > 1:
#     for i in range(k - 1):
#         lst.append(lst.pop(0))
#     del lst[0]
# print(*lst)

# Other solution (don't understand how it works)
# n = int(input())
# k = int(input())
#
# res = 0
# for i in range(1, n + 1):
#     res = (res + k) % i
# print(res + 1)

# import time
#
# start = time.time()
# for pen in range(0, 91, 10):
#     for pensil in range(0, 101, 5):
#         for eraser in range(0, 101, 2):
#             if pen + pensil + eraser == 100 and pen // 10 + pensil // 5 + eraser // 2 == 30:
#                 print(f'pen - {int(pen / 10)}, pensil - {int(pensil / 5)}, eraser - {int(eraser / 2)}')
#
# print(time.time() - start)
# pen - 2, pensil - 8, eraser - 20 and pen - 5, pensil - 0, eraser - 25


# Parameters and arguments in functions
# def say(message, times = 4):
#     print(message * times)
# say('Hello', 1)
# say('Bye', 7)

# Tuples and dictionaries as parameters in functions
# def total(a, b=4, *numbers, **phonebook):
#     print(f'a = {a}\tb = {b}')
#
#     for i in numbers:
#         print(f'item from numbers: {i}')
#
#     for first_part, second_part in phonebook.items():
#         print(first_part, second_part)
#
#
# total(17, Jack=1123, John=2231, Inge=1560)
# total(17, 3, Jack=1123, John=2231, Inge=1560)
# total(17, 4, 1, 2, 9, Jack=1123, John=2231, Inge=1560)


'''
–ï—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ –∫–ª—é—á—É, –∞ –Ω–µ –∫–∞–∫
–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∏—Ö –º–æ–∂–Ω–æ –æ–±—ä—è–≤–∏—Ç—å –ø–æ—Å–ª–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å–æ –∑–≤—ë–∑–¥–æ—á–∫–æ–π 
'''
# def total1(initial=5, *numbers, extra_number):
#     count = initial
#     for number in numbers:
#         count += number
#     count += extra_number
#     print(count)
#
#
# total(10, 1, 2, 3, extra_number=50)  # 66
# total(10, 1, 2, 3)   # TypeError: total() needs keyword-only argument extra_number

# –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–ª—é—á—É, –Ω–æ –Ω–µ –Ω—É–∂–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ –∑–≤—ë–∑–¥–æ—á–∫–æ–π,
# —Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑–∞—Ç—å –æ–¥–Ω—É –∑–≤—ë–∑–¥–æ—á–∫—É –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏–º–µ–Ω–∏: def total(initial=5, *, extra_number).

# Docstrings and how to call it to output
# def doc_example(a, b):
#     """
#     To show docstr use print(func_name.__doc__)
#
#     :param a: some text
#     :param b: other text
#     :return: text concatenation
#     """
#     c = a + b
#     return c
#
#
# print(doc_example.__doc__)
# print(doc_example('abc', 'DEF'))

# Modules. Page 77 in book http://svp.pp.ua/AByteOfPython/AByteofPythonRussian-2.02.pdf
# import sys
# import os
# print('Command line arguments:')
# for i in sys.argv:
#     print(i)
#
# print('\nPYTHONPATH variable contains\n', sys.path)
# print('\n', os.getcwd())   # get current working directory

# n = int(input('Give number greater than 10: '))
# simple_numbers = [2, 3]
# count = 2
# a = 5
#
# while count < n:
#     b = 0
#     for i in range(2, a + 1):
#         if i <= a ** 0.5:
#             if a % i == 0:
#                 print(i, 'is not simple number')
#                 b = 1
#             else:
#                 pass
#     if b != 1:
#         print(a, 'is simple')
#         simple_numbers += [a]
#     count += 1
#     a += 2
# print(simple_numbers)

'''
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–µ —á–µ—Ç–≤–µ—Ä—Ç–∏
–î–∞–Ω –Ω–∞–±–æ—Ä —Ç–æ—á–µ–∫ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∏ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫, –ª–µ–∂–∞—â–∏—Ö –≤ –∫–∞–∂–¥–æ–π
–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —á–µ—Ç–≤–µ—Ä—Ç–∏.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫. –ö–∞–∂–¥–∞—è —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–æ—á–∫–∏
(—Å–Ω–∞—á–∞–ª–∞ –∞–±—Å—Ü–∏—Å—Å–∞ ‚Äì x, –∑–∞—Ç–µ–º –æ—Ä–¥–∏–Ω–∞—Ç–∞ ‚Äì y), —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫, –ª–µ–∂–∞—â–∏—Ö –≤ –∫–∞–∂–¥–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —á–µ—Ç–≤–µ—Ä—Ç–∏, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –£—á—Ç–∏—Ç–µ, —á—Ç–æ —Ç–æ—á–∫–∏, –ª–µ–∂–∞—â–∏–µ –Ω–∞ –æ—Å—è—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—å –∫ –∫–∞–∫–æ–π –ª–∏–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —á–µ—Ç–≤–µ—Ä—Ç–∏.
–ü—Ä–∏–º–µ—Ä:
Input:
10
4 8
-3 -1
-4 9
4 0
-4 0
5 -2
0 0
1 1
13 -3
-43 3
Output:
–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: 2
–í—Ç–æ—Ä–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: 2
–¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å: 1
–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: 2
'''

# l = []
# all_dots = []
# for _ in range(int(input())):
#     l.extend(input().split())
#
# while len(l) > 0:
#     if int(l[0]) > 0 and int(l[1]) > 0:
#         all_dots.append(1)
#     elif int(l[0]) < 0 < int(l[1]):
#         all_dots.append(2)
#     elif int(l[0]) == 0 or int(l[1]) == 0:
#         pass
#     elif int(l[0]) < 0 and int(l[1]) < 0:
#         all_dots.append(3)
#     else:
#         all_dots.append(4)
#     l = l[2:]
# print(f'''–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {all_dots.count(1)}
# –í—Ç–æ—Ä–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {all_dots.count(2)}
# –¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å: {all_dots.count(3)}
# –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å: {all_dots.count(4)}''')

# Other solution
# n = int(input())
# count = [0, 0, 0, 0]
# names = ['–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å:', '–í—Ç–æ—Ä–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å:',
#          '–¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å:', '–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å:']
#
# for _ in range(n):
#     # –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è x, –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ - y
#     x, y = [int(num) for num in input().split()]
#     if x > 0 and y > 0:
#         count[0] += 1
#     elif x < 0 and y > 0:
#         count[1] += 1
#     elif x < 0 and y < 0:
#         count[2] += 1
#     elif x > 0 and y < 0:
#         count[3] += 1
#
# for i in range(4):
#     print(names[i], count[i])

'''
–ë–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª. –ò–∑ –Ω–µ—ë —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–º –≤ —ç—Ç–æ–º —Å–ø–∏—Å–∫–µ —á–∏—Å–ª–∞, —Ç–æ –µ—Å—Ç—å,
—Å—Ç–æ—è—Ç –≤—Å–ª–µ–¥ –∑–∞ –º–µ–Ω—å—à–∏–º —á–∏—Å–ª–æ–º.
Sample
Input: 1 1 3 2 2 1 1 1 Output: 1
'''
# numbers = [int(num) for num in input().split()]  # or nums = list(map(int, input().split()))
# count = 0
#
# for i in range(len(numbers) - 1):
#     if numbers[i] < numbers[i + 1]:
#         count += 1

# or
# for i in range(1, len(numbers)):
#     if numbers[i] > numbers[i - 1]:
#         count += 1
#
# print(count)

'''
–ù–∞–∑–∞–¥, –≤–ø–µ—Ä—ë–¥ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª. –ò–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ —Å–æ—Å–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ (a[0] c a[1], a[2] c a[3] –∏ —Ç.–¥.).
–ï—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ.
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, —Ä–∞–∑–¥–µ–ª—è—è –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º.
Sample
1 2 3 4 5 -> 2 1 4 3 5 ; 2 3 2 4 -> 3 2 4 2
'''
# nums = list(map(int, input().split()))
# for i in range(1, len(nums), 2):
#     nums[i - 1], nums[i] = nums[i], nums[i - 1]
# print(*nums)


'''
–°–¥–≤–∏–≥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª. –ò–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ —Å–¥–≤–∏–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–æ, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–µ—Ä–≤—ã–º, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
—Å–¥–≤–∏–≥–∞—é—Ç—Å—è –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –≤–ø–µ—Ä–µ–¥, –≤ —Å—Ç–æ—Ä–æ–Ω—É —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤.
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º —Å–¥–≤–∏–≥–æ–º, —Ä–∞–∑–¥–µ–ª—è—è –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–Ω–∏–º –ø—Ä–æ–±–µ–ª–æ–º.
Sample
1 2 3 4 5 - > 5 1 2 3 4
'''
# My solution #1
# digits = list(map(int, input().split()))
# digits1 = digits[:-1]
# digits1.insert(0, digits[-1])
# print(*digits1)

# My solution #2
# digits = [i for i in input().split()]
# digits2 = list()
# digits2.append(digits[-1])
# digits2.extend(digits[:-1])
# print(*digits2)

# Other solution !!!
# n = input().split()
# print(n.pop(), *n)
# or
# print(*[n[-1]] + n[:-1])


'''
–†–∞–∑–ª–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ –Ω–µ—É–±—ã–≤–∞–Ω–∏—é.
–ò–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ.
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ó–∞–¥–∞—á—É –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –±–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤.
Sample
2 2 5 5 5 5 8 10 10 -> 4 ; 5 5 5 5 5 555 -> 2
'''
# new_s = list(map(int, input().split()))
# count = 0
# for i in range(len(new_s) - 1):
#     if new_s[i + 1] > new_s[i]:
#         count += 1
# print(count + 1)

# Or with counter = 1
# numbers = input().split()
# counter = 1
#
# for i in range(len(numbers) - 1):
#     if numbers[i] != numbers[i + 1]:
#         counter += 1
#
# print(counter)

# With set (my solution)
# new_s = list(map(int, input().split()))
# list_to_set = set(new_s)
# print(len(list_to_set))

# One line with set (my solution)
# print(len(set(list(map(int, input().split())))))  # or print(len(set(input().split())))

# Other solution
# s = input().split()
# a = []
# for i in s:
#     if i not in a:
#         a.append(i)
# print(len(a))

'''
–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–µ–ª
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –¥–≤—É—Ö —á–∏—Å–µ–ª –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞, –≤—ã–≤–æ–¥—è—â—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç
–≤ –≤–∏–¥–µ –æ—Ç–≤–µ—Ç–∞ ¬´–î–ê¬ª –∏–ª–∏ ¬´–ù–ï–¢¬ª.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞—ë—Ç—Å—è —á–∏—Å–ª–æ n (0 < n < 1000) ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –≤ –Ω–∞–±–æ—Ä–µ. –í –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö n —Å—Ç—Ä–æ–∫–∞—Ö –≤–≤–æ–¥—è—Ç—Å—è —Ü–µ–ª—ã–µ
—á–∏—Å–ª–∞, —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ –Ω–∞–±–æ—Ä (–º–æ–≥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è). –ó–∞—Ç–µ–º —Å–ª–µ–¥—É–µ—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
–¥–≤—É—Ö –∫–∞–∫–∏—Ö-—Ç–æ —á–∏—Å–µ–ª –∏–∑ –Ω–∞–±–æ—Ä–∞.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –°–∞–º–æ –Ω–∞ —Å–µ–±—è —á–∏—Å–ª–æ –∏–∑ –Ω–∞–±–æ—Ä–∞ —É–º–Ω–æ–∂–∏—Ç—å—Å—è –Ω–µ –º–æ–∂–µ—Ç, –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –¥–≤–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–∞–∑–Ω—ã–µ
–∏–Ω–¥–µ–∫—Å—ã –≤ –Ω–∞–±–æ—Ä–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –î–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã.
'''
# n = int(input())
# numbers = [int(input()) for i in range(n)]
# multiply_number = int(input())
# is_multiplied = '–ù–ï–¢'
#
# # Bad solution
# for i in range(n):
#     for j in range(n):
#         if i != j:
#             if numbers[i] * numbers[j] == multiply_number:
#                 is_multiplied = '–î–ê'
#                 break
# print(is_multiplied)
#
# # Better solution
# for i in range(0, n - 1):
#     for j in range(i + 1, n):
#         if numbers[i] * numbers[j] == multiply_number:
#             is_multiplied = '–î–ê'
#             break
# print(is_multiplied)

# Other solution
# numbers, multiply = [int(input()) for i in range(int(input()))], int(input())
# for i in range(len(numbers)-1):
#     for j in range(i+1, len(numbers)):
#         if multiply == numbers[i] * numbers[j]:
#             exit(print("–î–ê"))
# print("–ù–ï–¢")

'''
–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞
–¢–∏–º—É—Ä –∏ –†—É—Å–ª–∞–Ω –ø—ã—Ç–∞—é—Ç—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ñ—Ä–æ–Ω—Ç —Ä–∞–±–æ—Ç—ã –ø–æ –∫—É—Ä—Å—É "Python –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤". –î–ª—è —ç—Ç–æ–≥–æ –æ–Ω–∏ —Ä–µ—à–∏–ª–∏ —Å—ã–≥—Ä–∞—Ç—å
–≤ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏ –±—É–º–∞–≥—É. –ü–æ–º–æ–≥–∏—Ç–µ —Ä–µ–±—è—Ç–∞–º –±—Ä–æ—Å–∏—Ç—å —á–µ—Å—Ç–Ω—ã–π –∂—Ä–µ–±–∏–π –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–π –º–æ–¥—É–ª—å
–Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å–ª–æ–≤–∞ "–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã" –∏–ª–∏ "–±—É–º–∞–≥–∞".
–ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω –≤—ã–±–æ—Ä –¢–∏–º—É—Ä–∞, –Ω–∞ –≤—Ç–æ—Ä–æ–π ‚Äì –≤—ã–±–æ—Ä –†—É—Å–ª–∞–Ω–∞.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∂–µ—Ä–µ–±—å—ë–≤–∫–∏, —Ç–æ –µ—Å—Ç—å –∫—Ç–æ –ø–æ–±–µ–¥–∏—Ç –¢–∏–º—É—Ä, –†—É—Å–ª–∞–Ω –∏–ª–∏ –æ–Ω–∏ —Å—ã–≥—Ä–∞—é—Ç –≤–Ω–∏—á—å—é.
'''
# options = ('–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞')
# first, second = input(), input()
# if first == second:
#     print('–Ω–∏—á—å—è')
# elif (first == options[0] and second == options[1]) or (first == options[1] and second == options[2]) or (first == options[2] and second == options[0]):
#     print('–¢–∏–º—É—Ä')
# else:
#     print('–†—É—Å–ª–∞–Ω')

# Other solution
# m = ['–∫–∞–º–µ–Ω—å–∫–∞–º–µ–Ω—å', '–Ω–∏—á—å—è', '–∫–∞–º–µ–Ω—å–Ω–æ–∂–Ω–∏—Ü—ã', '–¢–∏–º—É—Ä', '–∫–∞–º–µ–Ω—å–±—É–º–∞–≥–∞', '–†—É—Å–ª–∞–Ω',
#      '–Ω–æ–∂–Ω–∏—Ü—ã–Ω–æ–∂–Ω–∏—Ü—ã', '–Ω–∏—á—å—è', '–Ω–æ–∂–Ω–∏—Ü—ã–±—É–º–∞–≥–∞', '–¢–∏–º—É—Ä', '–Ω–æ–∂–Ω–∏—Ü—ã–∫–∞–º–µ–Ω—å', '–†—É—Å–ª–∞–Ω',
#      '–±—É–º–∞–≥–∞–±—É–º–∞–≥–∞', '–Ω–∏—á—å—è', '–±—É–º–∞–≥–∞–∫–∞–º–µ–Ω—å', '–¢–∏–º—É—Ä', '–±—É–º–∞–≥–∞–Ω–æ–∂–Ω–∏—Ü—ã', '–†—É—Å–ª–∞–Ω']
# s = input() + input()
# answer = m.index(s) + 1
# print(m[answer])

# Pure magic!!!
# x, y = input(), input()
# var = ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞']
# ans = ['–Ω–∏—á—å—è', '–†—É—Å–ª–∞–Ω', '–¢–∏–º—É—Ä']
# print(ans[var.index(x) - var.index(y)])
# Explanation:
# –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫: "–Ω–∏—á—å—è", "–¢–∏–º—É—Ä", "–†—É—Å–ª–∞–Ω", –≤ –Ω—ë–º 3 –∏–Ω–¥–µ–∫—Å–∞: 0, 1, 2. –û–¥–Ω–∞–∫–æ –∏–Ω–¥–µ–∫—Å—ã –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –∏ —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π
# —Å—Ç–æ—Ä–æ–Ω—ã, —Ç–æ–≥–¥–∞ –¥–æ–±–∞–≤—è—Ç—Å—è –µ—â—ë -1 –∏ -2, –∏—Ç–æ–≥–æ 5 –∏–Ω–¥–µ–∫—Å–æ–≤: -2, -1, 0, 1, 2. –ò–Ω–¥–µ–∫—Å "-3" —è –Ω–µ —É—á–∏—Ç—ã–≤–∞—é, —Ç.–∫. –æ–Ω –Ω–µ
# –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –î–∞–ª–µ–µ, –Ω–∞ –≤–≤–æ–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —Å–ª–æ–≤–∞: –Ω–æ–∂–Ω–∏—Ü—ã (0 –±—É–∫–≤ "–∞"), –∫–∞–º–µ–Ω—å (1 –±—É–∫–≤–∞ "–∞"),
# –±—É–º–∞–≥–∞ (2 –±—É–∫–≤—ã "–∞"). –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –∫–æ–ª-–≤–∞ –±—É–∫–≤ "–∞" –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –∏ –≤—Ç–æ—Ä—ã–º —Å–ª–æ–≤–æ–º
# –∏ —ç—Ç–∞ —Ä–∞–∑–Ω–∏—Ü–∞ –∏ –±—É–¥–µ—Ç –∏–Ω–¥–µ–∫—Å–æ–º-–∫–ª—é—á–æ–º –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –µ—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç –¥–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–ª–æ–≤–∞, —Ç–æ –∏
# —Ä–∞–∑–Ω–∏—Ü–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—É–∫–≤ "–∞" –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ 0

# Other solution
# tim = input()
# rus = input()
# knb = ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞']
# winner = ['–Ω–∏—á—å—è', '–†—É—Å–ª–∞–Ω', '–¢–∏–º—É—Ä']
#
# win_index = knb.index(tim) - knb.index(rus)
# print(winner[win_index])

'''
–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞, —è—â–µ—Ä–∏—Ü–∞, –°–ø–æ–∫ üå∂Ô∏è
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É –∏–∑ –ø–µ—Ä–µ—á–Ω—è "–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞",
"—è—â–µ—Ä–∏—Ü–∞" –∏–ª–∏ "–°–ø–æ–∫". –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω –≤—ã–±–æ—Ä –¢–∏–º—É—Ä–∞, –Ω–∞ –≤—Ç–æ—Ä–æ–π ‚Äì –≤—ã–±–æ—Ä –†—É—Å–ª–∞–Ω–∞.
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∂–µ—Ä–µ–±—å—ë–≤–∫–∏: –∫—Ç–æ –ø–æ–±–µ–¥–∏–ª - –¢–∏–º—É—Ä –∏–ª–∏ –†—É—Å–ª–∞–Ω, –∏–ª–∏ –æ–Ω–∏ —Å—ã–≥—Ä–∞–ª–∏ –≤–Ω–∏—á—å—é.
–ö–∞–º–µ–Ω—å –¥–∞–≤–∏—Ç –Ø—â–µ—Ä–∏—Ü—É, –ö–∞–º–µ–Ω—å —Ä–∞–∑–±–∏–≤–∞–µ—Ç –ù–æ–∂–Ω–∏—Ü—ã;
–ù–æ–∂–Ω–∏—Ü—ã —Ä–µ–∂—É—Ç –ë—É–º–∞–≥—É, –ù–æ–∂–Ω–∏—Ü—ã –æ–±–µ–∑–≥–ª–∞–≤–ª–∏–≤–∞—é—Ç –Ø—â–µ—Ä–∏—Ü—É;
–ë—É–º–∞–≥–∞ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –ö–∞–º–µ–Ω—å, –ë—É–º–∞–≥–∞ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –°–ø–æ–∫–∞;
–Ø—â–µ—Ä –æ—Ç—Ä–∞–≤–ª—è–µ—Ç –°–ø–æ–∫–∞, –Ø—â–µ—Ä —Å—ä–µ–¥–∞–µ—Ç –ë—É–º–∞–≥—É;
–°–ø–æ–∫ –ª–æ–º–∞–µ—Ç –ù–æ–∂–Ω–∏—Ü—ã, –°–ø–æ–∫ –∏—Å–ø–∞—Ä—è–µ—Ç –ö–∞–º–µ–Ω—å.
'''
# t, r = input(), input()
# timur = (-28, -25, -21, -18, -9, -3, 12, 16, 30, 46)
# if ord(t[0]) - ord(r[0]) in timur:
#     print('–¢–∏–º—É—Ä')
# elif t == r:
#     print('–Ω–∏—á—å—è')
# else:
#     print('–†—É—Å–ª–∞–Ω')

# Other solution
# a, b = input()[0], input()[0]   # !!! Pay attention how input is taken
# print('–Ω–∏—á—å—è' if a == b else '–¢–∏–º—É—Ä' if a + b in ('–∫–Ω', '–±–∫', '–Ω–±', '–∫—è', '—è–°', '–°–Ω', '–Ω—è', '—è–±', '–±–°', '–°–∫') else '–†—É—Å–ª–∞–Ω')

# Other solution
# timur, ruslan = input(), input()
# variants = ['—è—â–µ—Ä–∏—Ü–∞', '–°–ø–æ–∫', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞', '–∫–∞–º–µ–Ω—å']
# answers = ['–Ω–∏—á—å—è', '–†—É—Å–ª–∞–Ω', '–¢–∏–º—É—Ä', '–†—É—Å–ª–∞–Ω', '–¢–∏–º—É—Ä']
# timur, ruslan = variants.index(timur), variants.index(ruslan)
# print(timur, ruslan)
# print(answers[timur-ruslan])


# Other solution
# a, b = input()[0], input()[0]
# print('–Ω–∏—á—å—è' if a == b else '–¢–∏–º—É—Ä' if a + b in '–Ω–±–∫—è–°–Ω—è–±–°–∫–Ω' else '–†—É—Å–ª–∞–Ω')

'''
–û—Ä–µ–ª –∏ —Ä–µ—à–∫–∞
–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –±—É–∫–≤ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ "–û" –∏ "–†". –ë—É–∫–≤–∞ "–û" ‚Äì —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–ø–∞–¥–µ–Ω–∏—é –û—Ä–ª–∞, –∞ –±—É–∫–≤–∞ "–†"
‚Äì –†–µ—à–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä—è–¥ –≤—ã–ø–∞–≤—à–∏—Ö –†–µ—à–µ–∫.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ï—Å–ª–∏ –≤—ã–ø–∞–≤—à–∏—Ö –†–µ—à–µ–∫ –Ω–µ—Ç, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ 0.
Sample: –û–†–†–û–†–û–†–û–û–†–†–†–û -> 3
'''
# First
# s = input().split('–û')
# s1 = [len(i) for i in s]
# print(max(s1))

# Second
# s = input().split('–û')
# print(max([len(i) for i in s]))

# Final
# print(max([len(i) for i in input().split('–û')]))

# Better other solution
# print(len(max(input().split('–û'))))

# Other solution !! Empty strings are always considered to be a substring of any other string, so "" in "abc" will return True
# res = input()
# tmp = ''
# while tmp in res:
#     tmp += '–†'
# print(len(tmp) - 1)

# One more interesting solution
# word = input()
# x = 0
# for i in range(1, len(word)+1):
#     if i*'–†' in word:
#         x = i
# print(x)


'''
–ö—Ä–µ–º–Ω–∏–µ–≤–∞—è –¥–æ–ª–∏–Ω–∞ üå∂Ô∏èüå∂Ô∏è
–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ê–Ω—Ç–æ–Ω, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ì–∏–ª—Ñ–æ–π–ª–æ–º, –≤–∑–ª–æ–º–∞–ª —Å–µ—Ç—å —É–º–Ω—ã—Ö —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤.
–¢–µ–ø–µ—Ä—å –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Ö –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–µ—Ä–≤–µ—Ä–æ–≤ "–ü–µ–≥–æ–≥–æ –¥—É–¥–æ—á–Ω–∏–∫–∞". –ü–æ–º–æ–≥–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü—É —Ñ–∏—Ä–º—ã –æ—Ç—ã—Å–∫–∞—Ç—å –≤—Å–µ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã–µ
—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏.
–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Å—Ç—Ä–æ—á–Ω—ã—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä, –∏ –µ—Å–ª–∏ –≤ –Ω–µ–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
—Å–ª–æ–≤–æ "anton" (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä—è–¥–æ–º —Å—Ç–æ—è—â–∏–µ –±—É–∫–≤—ã, –≥–ª–∞–≤–Ω–æ–µ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—É–∫–≤), —Ç–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –∑–∞—Ä–∞–∂–µ–Ω –∏
–Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞, –Ω—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –µ–¥–∏–Ω–∏—Ü—ã

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞—ë—Ç—Å—è —á–∏—Å–ª–æ n ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤. –í –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö n —Å—Ç—Ä–æ–∫–∞—Ö –≤–≤–æ–¥—è—Ç—Å—è —Å—Ç—Ä–æ–∫–∏,
—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –æ—Ç 5 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤ –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
Sample:
6
222anton456
a1n1t1o1n1
0000a0000n00t00000o000000n
gylfole
richard
ant0n

1 2 3
'''
# result_list = [input() for _ in range(int(input()))]
# final = []
#
# for i in range(len(result_list)):
#     if result_list[i].find('a') != -1:
#         result_list[i] = result_list[i][result_list[i].find('a') + 1:]
#         if result_list[i].find('n') != -1:
#             result_list[i] = result_list[i][result_list[i].find('n') + 1:]
#             if result_list[i].find('t') != -1:
#                 result_list[i] = result_list[i][result_list[i].find('t') + 1:]
#                 if result_list[i].find('o') != -1:
#                     result_list[i] = result_list[i][result_list[i].find('o') + 1:]
#                     if result_list[i].find('n') != -1:
#                         final.append(i + 1)
# print(*final)

# Solution with regex - long version
# import re
# pattern = re.compile(r'a\w*n\w*t\w*o\w*n\w*')
# final = []
# for i in range(int(input())):
#     el = input()
#     result = re.findall(pattern, el)
#     if result:
#         final.append(i + 1)
# print(*final)

# Shorter version
# import re
# pattern = re.compile(r'a\w*n\w*t\w*o\w*n\w*')
# final = []
# for i in range(int(input())):
#     if re.findall(pattern, input()):
#         final.append(i + 1)
# print(*final)

# Other solution
# for i in range(int(input())):
#     s, virus, x = input(), 'anton', 0
#     for sym in s:
#         if sym == virus[x]:
#             x += 1
#             if x == 5:
#                 print(i + 1, end=' ')
#                 break


# result = re.match(r'AV', 'AV Analytics Vidhya AV')
# print(result)
# print(result.group(0))
#
# result_search = re.search(r'Analytics', 'AV Analytics Vidhya AV')
# print(result_search)
# print(result_search.group(0))
#
# res_findall = re.findall(r'AV', 'AV Analytics Vidhya AV')
# print(res_findall)


'''
–†–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä –∑–∞–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É –∞ üå∂Ô∏èüå∂Ô∏è
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, —Ä–µ–∞–ª–∏–∑—É—é—â—É—é –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è —ç—Ç–æ–π –ø–µ—Å–Ω–∏ https://www.youtube.com/watch?v=sAuMERnj-FU .
–ê–ª–≥–æ—Ä–∏—Ç–º –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â—É—é –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –±—É–∫–≤—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ —Ç–µ–∫—Å—Ç–∞,
–∞ –æ—á–µ—Ä–µ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É–∂–µ –±–µ–∑ —ç—Ç–æ–π –±—É–∫–≤—ã.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –æ–¥–Ω–æ —Å–ª–æ–≤–æ, –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ —Å—Ç—Ä–æ—á–Ω—ã–º–∏ —Ä—É—Å—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏ –±–µ–∑ –±—É–∫–≤—ã "—ë".
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–∞–∑–Ω—ã—Ö –±—É–∫–≤
–≤ —Å—Ç—Ä–æ–∫–µ, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—É—Ç–µ–º –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –∏ —Å—Ç—Ä–æ–∫–∏ "–∑–∞–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É".
Sample Input 1:
—Ä–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä
Sample Output 1:
—Ä–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä –∑–∞–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É –∞
—Ä–æ—Å–∫–æ–º–Ω–¥–∑–æ—Ä –∑–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É –±
—Ä–æ—Å–∫–æ–º–Ω–¥–∑–æ—Ä –∑–ø—Ä–µ—Ç–∏–ª —É–∫–≤—É –≤
—Ä–æ—Å–∫–æ–º–Ω–¥–∑–æ—Ä –∑–ø—Ä–µ—Ç–∏–ª —É–∫—É –¥
—Ä–æ—Å–∫–æ–º–Ω–∑–æ—Ä –∑–ø—Ä–µ—Ç–∏–ª —É–∫—É –µ
—Ä–æ—Å–∫–æ–º–Ω–∑–æ—Ä –∑–ø—Ä—Ç–∏–ª —É–∫—É –∑
—Ä–æ—Å–∫–æ–º–Ω–æ—Ä –ø—Ä—Ç–∏–ª —É–∫—É –∏
—Ä–æ—Å–∫–æ–º–Ω–æ—Ä –ø—Ä—Ç–ª —É–∫—É –∫
—Ä–æ—Å–æ–º–Ω–æ—Ä –ø—Ä—Ç–ª —É—É –ª
—Ä–æ—Å–æ–º–Ω–æ—Ä –ø—Ä—Ç —É—É –º
—Ä–æ—Å–æ–Ω–æ—Ä –ø—Ä—Ç —É—É –Ω
—Ä–æ—Å–æ–æ—Ä –ø—Ä—Ç —É—É –æ
—Ä—Å—Ä –ø—Ä—Ç —É—É –ø
—Ä—Å—Ä —Ä—Ç —É—É —Ä
—Å —Ç —É—É —Å
—Ç —É—É —Ç
—É—É —É
# abc = [chr(i + 1072) for i in range(32)] or alpha = [chr(i) for i in range(1072, 1104)]
'''
# phrase = input() + ' –∑–∞–ø—Ä–µ—Ç–∏–ª –±—É–∫–≤—É'
# abc = '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'
#
# for i in range(len(abc)):  # possible if i in abc:
#     if abc[i] in phrase:
#         print(phrase, abc[i])
#         phrase = phrase.replace(abc[i], '').replace('  ', ' ').strip()




# s = 'Testing PRI/Sec (#434242332;PP:432:133423846,335)'
# s1 = 'Testing PRI/Sec (#434242332;PP:432:133423846,335)'.replace('#', '-').replace(':', '-').replace(';', '-').replace('/', '-')
# print(s1)


# Decimal to binary
# n = int(input())
# b = ''
# while n > 0:
#     b = str(n % 2) + b
#     n = n // 2
# if len(b) < 8:
#     b = ((8 - len(b)) * '0') + b
# print(b)
# or
# for _ in range(8):
#     b = str(n % 2) + b
#     n //= 2
# print(b)

# Cesarus Code with map function
# def rotate_chr(c):
#     rot_by = 3
#     c = c.lower()
#     alphabet = "abcdefghijklmnopqrstuvwxyz"
#
#     if c not in alphabet:
#         return c
#     rotated_pos = ord(c) + rot_by
#
#     if rotated_pos <= ord(alphabet[-1]):
#         return chr(rotated_pos)
#
#     return chr(rotated_pos - len(alphabet))
#
#
# print("".join(map(rotate_chr, "My secret message goes here.")))

# List comprehension with if-else
# y = [print(0) if int(input()) % 2 == 0 else print(1)]


